{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport * as mockData from \"./mockData\";\nexport var getEvents = function () {\n  var _ref = _asyncToGenerator(function* () {\n    yield new Promise(function (resolve) {\n      return setTimeout(resolve, 1000);\n    });\n    try {\n      var events = mockData.getEvents();\n      return events;\n    } catch (error) {\n      console.error('Error fetching events:', error);\n      throw error;\n    }\n  });\n  return function getEvents() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var getEventById = function () {\n  var _ref2 = _asyncToGenerator(function* (eventId) {\n    yield new Promise(function (resolve) {\n      return setTimeout(resolve, 800);\n    });\n    try {\n      var event = mockData.getEventById(eventId);\n      if (!event) {\n        throw new Error('Event not found');\n      }\n      return event;\n    } catch (error) {\n      console.error(`Error fetching event ${eventId}:`, error);\n      throw error;\n    }\n  });\n  return function getEventById(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var getActiveEvents = function () {\n  var _ref3 = _asyncToGenerator(function* () {\n    yield new Promise(function (resolve) {\n      return setTimeout(resolve, 800);\n    });\n    try {\n      var events = mockData.getEvents();\n      return events.filter(function (event) {\n        return event.isActive;\n      });\n    } catch (error) {\n      console.error('Error fetching active events:', error);\n      throw error;\n    }\n  });\n  return function getActiveEvents() {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var updateEvent = function () {\n  var _ref4 = _asyncToGenerator(function* (eventId, updates) {\n    yield new Promise(function (resolve) {\n      return setTimeout(resolve, 1200);\n    });\n    try {\n      var event = mockData.getEventById(eventId);\n      if (!event) {\n        throw new Error('Event not found');\n      }\n      return _objectSpread(_objectSpread({}, event), updates);\n    } catch (error) {\n      console.error('Error updating event:', error);\n      throw error;\n    }\n  });\n  return function updateEvent(_x2, _x3) {\n    return _ref4.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["mockData","getEvents","_ref","_asyncToGenerator","Promise","resolve","setTimeout","events","error","console","apply","arguments","getEventById","_ref2","eventId","event","Error","_x","getActiveEvents","_ref3","filter","isActive","updateEvent","_ref4","updates","_objectSpread","_x2","_x3"],"sources":["/home/runner/workspace/src/services/eventService.js"],"sourcesContent":["import * as mockData from './mockData';\n\n/**\n * Get all events\n * @returns {Promise<Array>} - List of events\n */\nexport const getEvents = async () => {\n  // Simulate network request\n  await new Promise(resolve => setTimeout(resolve, 1000));\n  \n  try {\n    // Get mock event data - in a real app this would be a server request\n    const events = mockData.getEvents();\n    return events;\n  } catch (error) {\n    console.error('Error fetching events:', error);\n    throw error;\n  }\n};\n\n/**\n * Get event by ID\n * @param {string} eventId - The event ID\n * @returns {Promise<object>} - Event details\n */\nexport const getEventById = async (eventId) => {\n  // Simulate network request\n  await new Promise(resolve => setTimeout(resolve, 800));\n  \n  try {\n    const event = mockData.getEventById(eventId);\n    \n    if (!event) {\n      throw new Error('Event not found');\n    }\n    \n    return event;\n  } catch (error) {\n    console.error(`Error fetching event ${eventId}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Get active events\n * @returns {Promise<Array>} - List of active events\n */\nexport const getActiveEvents = async () => {\n  // Simulate network request\n  await new Promise(resolve => setTimeout(resolve, 800));\n  \n  try {\n    const events = mockData.getEvents();\n    return events.filter(event => event.isActive);\n  } catch (error) {\n    console.error('Error fetching active events:', error);\n    throw error;\n  }\n};\n\n/**\n * Update event details\n * @param {string} eventId - The event ID\n * @param {object} updates - The event updates\n * @returns {Promise<object>} - Updated event\n */\nexport const updateEvent = async (eventId, updates) => {\n  // Simulate network request\n  await new Promise(resolve => setTimeout(resolve, 1200));\n  \n  try {\n    // In a real app, this would update the event on the server\n    // For now, just return the merged updates\n    const event = mockData.getEventById(eventId);\n    \n    if (!event) {\n      throw new Error('Event not found');\n    }\n    \n    return { ...event, ...updates };\n  } catch (error) {\n    console.error('Error updating event:', error);\n    throw error;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}