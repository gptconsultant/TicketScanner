{"ast":null,"code":"\"use strict\";\n\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { getHeaderTitle, HeaderBackContext, HeaderHeightContext, HeaderShownContext } from '@react-navigation/elements';\nimport { useLinkBuilder, useLocale, useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { ModalPresentationContext } from \"../../utils/ModalPresentationContext.js\";\nimport { useKeyboardManager } from \"../../utils/useKeyboardManager.js\";\nimport { Card } from \"./Card.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar EPSILON = 0.1;\nfunction CardContainerInner(_ref) {\n  var interpolationIndex = _ref.interpolationIndex,\n    index = _ref.index,\n    active = _ref.active,\n    opening = _ref.opening,\n    closing = _ref.closing,\n    gesture = _ref.gesture,\n    focused = _ref.focused,\n    modal = _ref.modal,\n    getPreviousScene = _ref.getPreviousScene,\n    getFocusedRoute = _ref.getFocusedRoute,\n    hasAbsoluteFloatHeader = _ref.hasAbsoluteFloatHeader,\n    headerHeight = _ref.headerHeight,\n    onHeaderHeightChange = _ref.onHeaderHeightChange,\n    isParentHeaderShown = _ref.isParentHeaderShown,\n    isNextScreenTransparent = _ref.isNextScreenTransparent,\n    detachCurrentScreen = _ref.detachCurrentScreen,\n    layout = _ref.layout,\n    onCloseRoute = _ref.onCloseRoute,\n    onOpenRoute = _ref.onOpenRoute,\n    onGestureCancel = _ref.onGestureCancel,\n    onGestureEnd = _ref.onGestureEnd,\n    onGestureStart = _ref.onGestureStart,\n    onTransitionEnd = _ref.onTransitionEnd,\n    onTransitionStart = _ref.onTransitionStart,\n    preloaded = _ref.preloaded,\n    renderHeader = _ref.renderHeader,\n    safeAreaInsetBottom = _ref.safeAreaInsetBottom,\n    safeAreaInsetLeft = _ref.safeAreaInsetLeft,\n    safeAreaInsetRight = _ref.safeAreaInsetRight,\n    safeAreaInsetTop = _ref.safeAreaInsetTop,\n    scene = _ref.scene;\n  var _useLocale = useLocale(),\n    direction = _useLocale.direction;\n  var parentHeaderHeight = React.useContext(HeaderHeightContext);\n  var _useKeyboardManager = useKeyboardManager(React.useCallback(function () {\n      var _scene$descriptor = scene.descriptor,\n        options = _scene$descriptor.options,\n        navigation = _scene$descriptor.navigation;\n      return navigation.isFocused() && options.keyboardHandlingEnabled !== false;\n    }, [scene.descriptor])),\n    onPageChangeStart = _useKeyboardManager.onPageChangeStart,\n    onPageChangeCancel = _useKeyboardManager.onPageChangeCancel,\n    onPageChangeConfirm = _useKeyboardManager.onPageChangeConfirm;\n  var handleOpen = function handleOpen() {\n    var route = scene.descriptor.route;\n    onTransitionEnd({\n      route: route\n    }, false);\n    onOpenRoute({\n      route: route\n    });\n  };\n  var handleClose = function handleClose() {\n    var route = scene.descriptor.route;\n    onTransitionEnd({\n      route: route\n    }, true);\n    onCloseRoute({\n      route: route\n    });\n  };\n  var handleGestureBegin = function handleGestureBegin() {\n    var route = scene.descriptor.route;\n    onPageChangeStart();\n    onGestureStart({\n      route: route\n    });\n  };\n  var handleGestureCanceled = function handleGestureCanceled() {\n    var route = scene.descriptor.route;\n    onPageChangeCancel();\n    onGestureCancel({\n      route: route\n    });\n  };\n  var handleGestureEnd = function handleGestureEnd() {\n    var route = scene.descriptor.route;\n    onGestureEnd({\n      route: route\n    });\n  };\n  var handleTransition = function handleTransition(_ref2) {\n    var closing = _ref2.closing,\n      gesture = _ref2.gesture;\n    var route = scene.descriptor.route;\n    if (!gesture) {\n      onPageChangeConfirm == null ? void 0 : onPageChangeConfirm(true);\n    } else if (active && closing) {\n      onPageChangeConfirm == null ? void 0 : onPageChangeConfirm(false);\n    } else {\n      onPageChangeCancel == null ? void 0 : onPageChangeCancel();\n    }\n    onTransitionStart == null ? void 0 : onTransitionStart({\n      route: route\n    }, closing);\n  };\n  var insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft\n  };\n  var _useTheme = useTheme(),\n    colors = _useTheme.colors;\n  var _React$useState = React.useState('box-none'),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    pointerEvents = _React$useState2[0],\n    setPointerEvents = _React$useState2[1];\n  React.useEffect(function () {\n    var _scene$progress$next;\n    var listener = (_scene$progress$next = scene.progress.next) == null ? void 0 : _scene$progress$next.addListener == null ? void 0 : _scene$progress$next.addListener(function (_ref3) {\n      var value = _ref3.value;\n      setPointerEvents(value <= EPSILON ? 'box-none' : 'none');\n    });\n    return function () {\n      if (listener) {\n        var _scene$progress$next2;\n        (_scene$progress$next2 = scene.progress.next) == null ? void 0 : _scene$progress$next2.removeListener == null ? void 0 : _scene$progress$next2.removeListener(listener);\n      }\n    };\n  }, [pointerEvents, scene.progress.next]);\n  var _scene$descriptor$opt = scene.descriptor.options,\n    presentation = _scene$descriptor$opt.presentation,\n    animation = _scene$descriptor$opt.animation,\n    cardOverlay = _scene$descriptor$opt.cardOverlay,\n    cardOverlayEnabled = _scene$descriptor$opt.cardOverlayEnabled,\n    cardShadowEnabled = _scene$descriptor$opt.cardShadowEnabled,\n    cardStyle = _scene$descriptor$opt.cardStyle,\n    cardStyleInterpolator = _scene$descriptor$opt.cardStyleInterpolator,\n    gestureDirection = _scene$descriptor$opt.gestureDirection,\n    gestureEnabled = _scene$descriptor$opt.gestureEnabled,\n    gestureResponseDistance = _scene$descriptor$opt.gestureResponseDistance,\n    gestureVelocityImpact = _scene$descriptor$opt.gestureVelocityImpact,\n    headerMode = _scene$descriptor$opt.headerMode,\n    headerShown = _scene$descriptor$opt.headerShown,\n    transitionSpec = _scene$descriptor$opt.transitionSpec;\n  var _useLinkBuilder = useLinkBuilder(),\n    buildHref = _useLinkBuilder.buildHref;\n  var previousScene = getPreviousScene({\n    route: scene.descriptor.route\n  });\n  var backTitle;\n  var href;\n  if (previousScene) {\n    var _previousScene$descri = previousScene.descriptor,\n      options = _previousScene$descri.options,\n      route = _previousScene$descri.route;\n    backTitle = getHeaderTitle(options, route.name);\n    href = buildHref(route.name, route.params);\n  }\n  var canGoBack = previousScene != null;\n  var headerBack = React.useMemo(function () {\n    if (canGoBack) {\n      return {\n        href: href,\n        title: backTitle\n      };\n    }\n    return undefined;\n  }, [canGoBack, backTitle, href]);\n  return _jsx(Card, {\n    interpolationIndex: interpolationIndex,\n    gestureDirection: gestureDirection,\n    layout: layout,\n    insets: insets,\n    direction: direction,\n    gesture: gesture,\n    current: scene.progress.current,\n    next: scene.progress.next,\n    opening: opening,\n    closing: closing,\n    onOpen: handleOpen,\n    onClose: handleClose,\n    overlay: cardOverlay,\n    overlayEnabled: cardOverlayEnabled,\n    shadowEnabled: cardShadowEnabled,\n    onTransition: handleTransition,\n    onGestureBegin: handleGestureBegin,\n    onGestureCanceled: handleGestureCanceled,\n    onGestureEnd: handleGestureEnd,\n    gestureEnabled: index === 0 ? false : gestureEnabled,\n    gestureResponseDistance: gestureResponseDistance,\n    gestureVelocityImpact: gestureVelocityImpact,\n    transitionSpec: transitionSpec,\n    styleInterpolator: cardStyleInterpolator,\n    accessibilityElementsHidden: !focused,\n    importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',\n    pointerEvents: active ? 'box-none' : pointerEvents,\n    pageOverflowEnabled: headerMode !== 'float' && presentation !== 'modal',\n    preloaded: preloaded,\n    containerStyle: hasAbsoluteFloatHeader && headerMode !== 'screen' ? {\n      marginTop: headerHeight\n    } : null,\n    contentStyle: [{\n      backgroundColor: presentation === 'transparentModal' ? 'transparent' : colors.background\n    }, cardStyle],\n    style: [{\n      overflow: active ? undefined : 'hidden',\n      display: animation === 'none' && isNextScreenTransparent === false && detachCurrentScreen !== false && !focused ? 'none' : 'flex'\n    }, StyleSheet.absoluteFill],\n    children: _jsx(View, {\n      style: styles.container,\n      children: _jsxs(ModalPresentationContext.Provider, {\n        value: modal,\n        children: [headerMode !== 'float' ? renderHeader({\n          mode: 'screen',\n          layout: layout,\n          scenes: [previousScene, scene],\n          getPreviousScene: getPreviousScene,\n          getFocusedRoute: getFocusedRoute,\n          onContentHeightChange: onHeaderHeightChange,\n          style: styles.header\n        }) : null, _jsx(View, {\n          style: styles.scene,\n          children: _jsx(HeaderBackContext.Provider, {\n            value: headerBack,\n            children: _jsx(HeaderShownContext.Provider, {\n              value: isParentHeaderShown || headerShown !== false,\n              children: _jsx(HeaderHeightContext.Provider, {\n                value: headerShown !== false ? headerHeight : parentHeaderHeight != null ? parentHeaderHeight : 0,\n                children: scene.descriptor.render()\n              })\n            })\n          })\n        })]\n      })\n    })\n  });\n}\nexport var CardContainer = React.memo(CardContainerInner);\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  header: {\n    zIndex: 1\n  },\n  scene: {\n    flex: 1\n  }\n});","map":{"version":3,"names":["getHeaderTitle","HeaderBackContext","HeaderHeightContext","HeaderShownContext","useLinkBuilder","useLocale","useTheme","React","StyleSheet","View","ModalPresentationContext","useKeyboardManager","Card","jsx","_jsx","jsxs","_jsxs","EPSILON","CardContainerInner","_ref","interpolationIndex","index","active","opening","closing","gesture","focused","modal","getPreviousScene","getFocusedRoute","hasAbsoluteFloatHeader","headerHeight","onHeaderHeightChange","isParentHeaderShown","isNextScreenTransparent","detachCurrentScreen","layout","onCloseRoute","onOpenRoute","onGestureCancel","onGestureEnd","onGestureStart","onTransitionEnd","onTransitionStart","preloaded","renderHeader","safeAreaInsetBottom","safeAreaInsetLeft","safeAreaInsetRight","safeAreaInsetTop","scene","_useLocale","direction","parentHeaderHeight","useContext","_useKeyboardManager","useCallback","_scene$descriptor","descriptor","options","navigation","isFocused","keyboardHandlingEnabled","onPageChangeStart","onPageChangeCancel","onPageChangeConfirm","handleOpen","route","handleClose","handleGestureBegin","handleGestureCanceled","handleGestureEnd","handleTransition","_ref2","insets","top","right","bottom","left","_useTheme","colors","_React$useState","useState","_React$useState2","_slicedToArray","pointerEvents","setPointerEvents","useEffect","_scene$progress$next","listener","progress","next","addListener","_ref3","value","_scene$progress$next2","removeListener","_scene$descriptor$opt","presentation","animation","cardOverlay","cardOverlayEnabled","cardShadowEnabled","cardStyle","cardStyleInterpolator","gestureDirection","gestureEnabled","gestureResponseDistance","gestureVelocityImpact","headerMode","headerShown","transitionSpec","_useLinkBuilder","buildHref","previousScene","backTitle","href","_previousScene$descri","name","params","canGoBack","headerBack","useMemo","title","undefined","current","onOpen","onClose","overlay","overlayEnabled","shadowEnabled","onTransition","onGestureBegin","onGestureCanceled","styleInterpolator","accessibilityElementsHidden","importantForAccessibility","pageOverflowEnabled","containerStyle","marginTop","contentStyle","backgroundColor","background","style","overflow","display","absoluteFill","children","styles","container","Provider","mode","scenes","onContentHeightChange","header","render","CardContainer","memo","create","flex","zIndex"],"sources":["/home/runner/workspace/node_modules/@react-navigation/stack/src/views/Stack/CardContainer.tsx"],"sourcesContent":["import {\n  getHeaderTitle,\n  HeaderBackContext,\n  HeaderHeightContext,\n  HeaderShownContext,\n} from '@react-navigation/elements';\nimport {\n  type Route,\n  useLinkBuilder,\n  useLocale,\n  useTheme,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport { Animated, StyleSheet, View } from 'react-native';\n\nimport type { Layout, Scene } from '../../types';\nimport { ModalPresentationContext } from '../../utils/ModalPresentationContext';\nimport { useKeyboardManager } from '../../utils/useKeyboardManager';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport { Card } from './Card';\n\ntype Props = {\n  interpolationIndex: number;\n  index: number;\n  active: boolean;\n  focused: boolean;\n  opening: boolean;\n  closing: boolean;\n  modal: boolean;\n  layout: Layout;\n  gesture: Animated.Value;\n  preloaded: boolean;\n  scene: Scene;\n  safeAreaInsetTop: number;\n  safeAreaInsetRight: number;\n  safeAreaInsetBottom: number;\n  safeAreaInsetLeft: number;\n  getPreviousScene: (props: { route: Route<string> }) => Scene | undefined;\n  getFocusedRoute: () => Route<string>;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onGestureStart: (props: { route: Route<string> }) => void;\n  onGestureEnd: (props: { route: Route<string> }) => void;\n  onGestureCancel: (props: { route: Route<string> }) => void;\n  hasAbsoluteFloatHeader: boolean;\n  headerHeight: number;\n  onHeaderHeightChange: (props: {\n    route: Route<string>;\n    height: number;\n  }) => void;\n  isParentHeaderShown: boolean;\n  isNextScreenTransparent: boolean;\n  detachCurrentScreen: boolean;\n};\n\nconst EPSILON = 0.1;\n\nfunction CardContainerInner({\n  interpolationIndex,\n  index,\n  active,\n  opening,\n  closing,\n  gesture,\n  focused,\n  modal,\n  getPreviousScene,\n  getFocusedRoute,\n  hasAbsoluteFloatHeader,\n  headerHeight,\n  onHeaderHeightChange,\n  isParentHeaderShown,\n  isNextScreenTransparent,\n  detachCurrentScreen,\n  layout,\n  onCloseRoute,\n  onOpenRoute,\n  onGestureCancel,\n  onGestureEnd,\n  onGestureStart,\n  onTransitionEnd,\n  onTransitionStart,\n  preloaded,\n  renderHeader,\n  safeAreaInsetBottom,\n  safeAreaInsetLeft,\n  safeAreaInsetRight,\n  safeAreaInsetTop,\n  scene,\n}: Props) {\n  const { direction } = useLocale();\n\n  const parentHeaderHeight = React.useContext(HeaderHeightContext);\n\n  const { onPageChangeStart, onPageChangeCancel, onPageChangeConfirm } =\n    useKeyboardManager(\n      React.useCallback(() => {\n        const { options, navigation } = scene.descriptor;\n\n        return (\n          navigation.isFocused() && options.keyboardHandlingEnabled !== false\n        );\n      }, [scene.descriptor])\n    );\n\n  const handleOpen = () => {\n    const { route } = scene.descriptor;\n\n    onTransitionEnd({ route }, false);\n    onOpenRoute({ route });\n  };\n\n  const handleClose = () => {\n    const { route } = scene.descriptor;\n\n    onTransitionEnd({ route }, true);\n    onCloseRoute({ route });\n  };\n\n  const handleGestureBegin = () => {\n    const { route } = scene.descriptor;\n\n    onPageChangeStart();\n    onGestureStart({ route });\n  };\n\n  const handleGestureCanceled = () => {\n    const { route } = scene.descriptor;\n\n    onPageChangeCancel();\n    onGestureCancel({ route });\n  };\n\n  const handleGestureEnd = () => {\n    const { route } = scene.descriptor;\n\n    onGestureEnd({ route });\n  };\n\n  const handleTransition = ({\n    closing,\n    gesture,\n  }: {\n    closing: boolean;\n    gesture: boolean;\n  }) => {\n    const { route } = scene.descriptor;\n\n    if (!gesture) {\n      onPageChangeConfirm?.(true);\n    } else if (active && closing) {\n      onPageChangeConfirm?.(false);\n    } else {\n      onPageChangeCancel?.();\n    }\n\n    onTransitionStart?.({ route }, closing);\n  };\n\n  const insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft,\n  };\n\n  const { colors } = useTheme();\n\n  const [pointerEvents, setPointerEvents] = React.useState<'box-none' | 'none'>(\n    'box-none'\n  );\n\n  React.useEffect(() => {\n    const listener = scene.progress.next?.addListener?.(\n      ({ value }: { value: number }) => {\n        setPointerEvents(value <= EPSILON ? 'box-none' : 'none');\n      }\n    );\n\n    return () => {\n      if (listener) {\n        scene.progress.next?.removeListener?.(listener);\n      }\n    };\n  }, [pointerEvents, scene.progress.next]);\n\n  const {\n    presentation,\n    animation,\n    cardOverlay,\n    cardOverlayEnabled,\n    cardShadowEnabled,\n    cardStyle,\n    cardStyleInterpolator,\n    gestureDirection,\n    gestureEnabled,\n    gestureResponseDistance,\n    gestureVelocityImpact,\n    headerMode,\n    headerShown,\n    transitionSpec,\n  } = scene.descriptor.options;\n\n  const { buildHref } = useLinkBuilder();\n  const previousScene = getPreviousScene({ route: scene.descriptor.route });\n\n  let backTitle: string | undefined;\n  let href: string | undefined;\n\n  if (previousScene) {\n    const { options, route } = previousScene.descriptor;\n\n    backTitle = getHeaderTitle(options, route.name);\n    href = buildHref(route.name, route.params);\n  }\n\n  const canGoBack = previousScene != null;\n  const headerBack = React.useMemo(() => {\n    if (canGoBack) {\n      return {\n        href,\n        title: backTitle,\n      };\n    }\n\n    return undefined;\n  }, [canGoBack, backTitle, href]);\n\n  return (\n    <Card\n      interpolationIndex={interpolationIndex}\n      gestureDirection={gestureDirection}\n      layout={layout}\n      insets={insets}\n      direction={direction}\n      gesture={gesture}\n      current={scene.progress.current}\n      next={scene.progress.next}\n      opening={opening}\n      closing={closing}\n      onOpen={handleOpen}\n      onClose={handleClose}\n      overlay={cardOverlay}\n      overlayEnabled={cardOverlayEnabled}\n      shadowEnabled={cardShadowEnabled}\n      onTransition={handleTransition}\n      onGestureBegin={handleGestureBegin}\n      onGestureCanceled={handleGestureCanceled}\n      onGestureEnd={handleGestureEnd}\n      gestureEnabled={index === 0 ? false : gestureEnabled}\n      gestureResponseDistance={gestureResponseDistance}\n      gestureVelocityImpact={gestureVelocityImpact}\n      transitionSpec={transitionSpec}\n      styleInterpolator={cardStyleInterpolator}\n      accessibilityElementsHidden={!focused}\n      importantForAccessibility={focused ? 'auto' : 'no-hide-descendants'}\n      pointerEvents={active ? 'box-none' : pointerEvents}\n      pageOverflowEnabled={headerMode !== 'float' && presentation !== 'modal'}\n      preloaded={preloaded}\n      containerStyle={\n        hasAbsoluteFloatHeader && headerMode !== 'screen'\n          ? { marginTop: headerHeight }\n          : null\n      }\n      contentStyle={[\n        {\n          backgroundColor:\n            presentation === 'transparentModal'\n              ? 'transparent'\n              : colors.background,\n        },\n        cardStyle,\n      ]}\n      style={[\n        {\n          // This is necessary to avoid unfocused larger pages increasing scroll area\n          // The issue can be seen on the web when a smaller screen is pushed over a larger one\n          overflow: active ? undefined : 'hidden',\n          display:\n            // Hide unfocused screens when animation isn't enabled\n            // This is also necessary for a11y on web\n            animation === 'none' &&\n            isNextScreenTransparent === false &&\n            detachCurrentScreen !== false &&\n            !focused\n              ? 'none'\n              : 'flex',\n        },\n        StyleSheet.absoluteFill,\n      ]}\n    >\n      <View style={styles.container}>\n        <ModalPresentationContext.Provider value={modal}>\n          {headerMode !== 'float'\n            ? renderHeader({\n                mode: 'screen',\n                layout,\n                scenes: [previousScene, scene],\n                getPreviousScene,\n                getFocusedRoute,\n                onContentHeightChange: onHeaderHeightChange,\n                style: styles.header,\n              })\n            : null}\n          <View style={styles.scene}>\n            <HeaderBackContext.Provider value={headerBack}>\n              <HeaderShownContext.Provider\n                value={isParentHeaderShown || headerShown !== false}\n              >\n                <HeaderHeightContext.Provider\n                  value={\n                    headerShown !== false\n                      ? headerHeight\n                      : parentHeaderHeight ?? 0\n                  }\n                >\n                  {scene.descriptor.render()}\n                </HeaderHeightContext.Provider>\n              </HeaderShownContext.Provider>\n            </HeaderBackContext.Provider>\n          </View>\n        </ModalPresentationContext.Provider>\n      </View>\n    </Card>\n  );\n}\n\nexport const CardContainer = React.memo(CardContainerInner);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  header: {\n    zIndex: 1,\n  },\n  scene: {\n    flex: 1,\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}