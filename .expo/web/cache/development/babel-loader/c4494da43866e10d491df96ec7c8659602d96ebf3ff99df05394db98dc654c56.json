{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport * as eventService from \"../services/eventService\";\nimport * as gateService from \"../services/gateService\";\nimport * as asyncStorage from \"../utils/asyncStorage\";\nimport { useAuth } from \"./AuthContext\";\nimport { useNetwork } from \"./NetworkContext\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar EventContext = createContext();\nexport var useEvent = function useEvent() {\n  return useContext(EventContext);\n};\nexport var EventProvider = function EventProvider(_ref) {\n  var children = _ref.children;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    events = _useState2[0],\n    setEvents = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    selectedEvent = _useState4[0],\n    setSelectedEvent = _useState4[1];\n  var _useState5 = useState([]),\n    _useState6 = _slicedToArray(_useState5, 2),\n    gates = _useState6[0],\n    setGates = _useState6[1];\n  var _useState7 = useState(null),\n    _useState8 = _slicedToArray(_useState7, 2),\n    selectedGate = _useState8[0],\n    setSelectedGate = _useState8[1];\n  var _useState9 = useState(false),\n    _useState10 = _slicedToArray(_useState9, 2),\n    loading = _useState10[0],\n    setLoading = _useState10[1];\n  var _useState11 = useState(null),\n    _useState12 = _slicedToArray(_useState11, 2),\n    error = _useState12[0],\n    setError = _useState12[1];\n  var _useAuth = useAuth(),\n    user = _useAuth.user;\n  var _useNetwork = useNetwork(),\n    isConnected = _useNetwork.isConnected;\n  useEffect(function () {\n    if (user) {\n      loadEvents();\n      restoreSessionData();\n    }\n  }, [user]);\n  var restoreSessionData = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        var sessionData = yield asyncStorage.getSessionData();\n        if (sessionData) {\n          if (sessionData.selectedEvent) {\n            setSelectedEvent(sessionData.selectedEvent);\n            if (sessionData.selectedEvent.id) {\n              loadGates(sessionData.selectedEvent.id);\n            }\n          }\n          if (sessionData.selectedGate) {\n            setSelectedGate(sessionData.selectedGate);\n          }\n        }\n      } catch (err) {\n        console.error(\"Error restoring session data:\", err);\n      }\n    });\n    return function restoreSessionData() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var loadEvents = function () {\n    var _ref3 = _asyncToGenerator(function* () {\n      try {\n        setLoading(true);\n        setError(null);\n        var eventsData = yield eventService.getEvents();\n        setEvents(eventsData);\n      } catch (err) {\n        setError('Failed to load events: ' + err.message);\n        console.error(err);\n      } finally {\n        setLoading(false);\n      }\n    });\n    return function loadEvents() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var loadGates = function () {\n    var _ref4 = _asyncToGenerator(function* (eventId) {\n      try {\n        setLoading(true);\n        setError(null);\n        var gatesData = yield gateService.getGatesByEvent(eventId);\n        setGates(gatesData);\n      } catch (err) {\n        setError('Failed to load gates: ' + err.message);\n        console.error(err);\n      } finally {\n        setLoading(false);\n      }\n    });\n    return function loadGates(_x) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  var selectEvent = function () {\n    var _ref5 = _asyncToGenerator(function* (event) {\n      setSelectedEvent(event);\n      yield asyncStorage.storeSessionData(_objectSpread(_objectSpread({}, (yield asyncStorage.getSessionData()) || {}), {}, {\n        selectedEvent: event\n      }));\n      if (event != null && event.id) {\n        yield loadGates(event.id);\n      }\n    });\n    return function selectEvent(_x2) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n  var selectGate = function () {\n    var _ref6 = _asyncToGenerator(function* (gate) {\n      setSelectedGate(gate);\n      yield asyncStorage.storeSessionData(_objectSpread(_objectSpread({}, (yield asyncStorage.getSessionData()) || {}), {}, {\n        selectedGate: gate\n      }));\n    });\n    return function selectGate(_x3) {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n  var updateGateStatus = function () {\n    var _ref7 = _asyncToGenerator(function* (gateId, isEnabled) {\n      try {\n        setLoading(true);\n        setError(null);\n        if (isConnected) {\n          yield gateService.updateGateStatus(gateId, isEnabled);\n        } else {\n          yield asyncStorage.queueGateStatusChange(gateId, isEnabled);\n        }\n        setGates(gates.map(function (gate) {\n          return gate.id === gateId ? _objectSpread(_objectSpread({}, gate), {}, {\n            isEnabled: isEnabled\n          }) : gate;\n        }));\n      } catch (err) {\n        setError('Failed to update gate status: ' + err.message);\n        console.error(err);\n      } finally {\n        setLoading(false);\n      }\n    });\n    return function updateGateStatus(_x4, _x5) {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n  return _jsx(EventContext.Provider, {\n    value: {\n      events: events,\n      selectedEvent: selectedEvent,\n      gates: gates,\n      selectedGate: selectedGate,\n      loading: loading,\n      error: error,\n      loadEvents: loadEvents,\n      selectEvent: selectEvent,\n      loadGates: loadGates,\n      selectGate: selectGate,\n      updateGateStatus: updateGateStatus\n    },\n    children: children\n  });\n};","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","eventService","gateService","asyncStorage","useAuth","useNetwork","jsx","_jsx","EventContext","useEvent","EventProvider","_ref","children","_useState","_useState2","_slicedToArray","events","setEvents","_useState3","_useState4","selectedEvent","setSelectedEvent","_useState5","_useState6","gates","setGates","_useState7","_useState8","selectedGate","setSelectedGate","_useState9","_useState10","loading","setLoading","_useState11","_useState12","error","setError","_useAuth","user","_useNetwork","isConnected","loadEvents","restoreSessionData","_ref2","_asyncToGenerator","sessionData","getSessionData","id","loadGates","err","console","apply","arguments","_ref3","eventsData","getEvents","message","_ref4","eventId","gatesData","getGatesByEvent","_x","selectEvent","_ref5","event","storeSessionData","_objectSpread","_x2","selectGate","_ref6","gate","_x3","updateGateStatus","_ref7","gateId","isEnabled","queueGateStatusChange","map","_x4","_x5","Provider","value"],"sources":["/home/runner/workspace/src/contexts/EventContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport * as eventService from '../services/eventService';\nimport * as gateService from '../services/gateService';\nimport * as asyncStorage from '../utils/asyncStorage';\nimport { useAuth } from './AuthContext';\nimport { useNetwork } from './NetworkContext';\n\nconst EventContext = createContext();\n\nexport const useEvent = () => useContext(EventContext);\n\nexport const EventProvider = ({ children }) => {\n  const [events, setEvents] = useState([]);\n  const [selectedEvent, setSelectedEvent] = useState(null);\n  const [gates, setGates] = useState([]);\n  const [selectedGate, setSelectedGate] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  \n  const { user } = useAuth();\n  const { isConnected } = useNetwork();\n\n  useEffect(() => {\n    if (user) {\n      loadEvents();\n      // Try to restore the selected event and gate from storage\n      restoreSessionData();\n    }\n  }, [user]);\n\n  const restoreSessionData = async () => {\n    try {\n      const sessionData = await asyncStorage.getSessionData();\n      if (sessionData) {\n        if (sessionData.selectedEvent) {\n          setSelectedEvent(sessionData.selectedEvent);\n          if (sessionData.selectedEvent.id) {\n            loadGates(sessionData.selectedEvent.id);\n          }\n        }\n        if (sessionData.selectedGate) {\n          setSelectedGate(sessionData.selectedGate);\n        }\n      }\n    } catch (err) {\n      console.error(\"Error restoring session data:\", err);\n    }\n  };\n\n  const loadEvents = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const eventsData = await eventService.getEvents();\n      setEvents(eventsData);\n    } catch (err) {\n      setError('Failed to load events: ' + err.message);\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadGates = async (eventId) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const gatesData = await gateService.getGatesByEvent(eventId);\n      setGates(gatesData);\n    } catch (err) {\n      setError('Failed to load gates: ' + err.message);\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const selectEvent = async (event) => {\n    setSelectedEvent(event);\n    await asyncStorage.storeSessionData({ \n      ...await asyncStorage.getSessionData() || {}, \n      selectedEvent: event \n    });\n    \n    if (event?.id) {\n      await loadGates(event.id);\n    }\n  };\n\n  const selectGate = async (gate) => {\n    setSelectedGate(gate);\n    await asyncStorage.storeSessionData({ \n      ...await asyncStorage.getSessionData() || {}, \n      selectedGate: gate \n    });\n  };\n\n  const updateGateStatus = async (gateId, isEnabled) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // Check if we're online before making the API call\n      if (isConnected) {\n        await gateService.updateGateStatus(gateId, isEnabled);\n      } else {\n        // Queue up changes for sync later\n        await asyncStorage.queueGateStatusChange(gateId, isEnabled);\n      }\n      \n      // Update local state immediately for better UX\n      setGates(gates.map(gate => \n        gate.id === gateId ? { ...gate, isEnabled } : gate\n      ));\n    } catch (err) {\n      setError('Failed to update gate status: ' + err.message);\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <EventContext.Provider value={{\n      events,\n      selectedEvent,\n      gates,\n      selectedGate,\n      loading,\n      error,\n      loadEvents,\n      selectEvent,\n      loadGates,\n      selectGate,\n      updateGateStatus\n    }}>\n      {children}\n    </EventContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}