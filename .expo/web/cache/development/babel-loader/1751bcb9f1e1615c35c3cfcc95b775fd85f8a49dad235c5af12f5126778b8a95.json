{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport * as mockData from \"./mockData\";\nexport var getGatesByEvent = function () {\n  var _ref = _asyncToGenerator(function* (eventId) {\n    yield new Promise(function (resolve) {\n      return setTimeout(resolve, 800);\n    });\n    try {\n      var gates = mockData.getGatesByEventId(eventId);\n      return gates;\n    } catch (error) {\n      console.error(`Error fetching gates for event ${eventId}:`, error);\n      throw error;\n    }\n  });\n  return function getGatesByEvent(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var getGateById = function () {\n  var _ref2 = _asyncToGenerator(function* (gateId) {\n    yield new Promise(function (resolve) {\n      return setTimeout(resolve, 500);\n    });\n    try {\n      var gate = mockData.getGateById(gateId);\n      if (!gate) {\n        throw new Error('Gate not found');\n      }\n      return gate;\n    } catch (error) {\n      console.error(`Error fetching gate ${gateId}:`, error);\n      throw error;\n    }\n  });\n  return function getGateById(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var updateGateStatus = function () {\n  var _ref3 = _asyncToGenerator(function* (gateId, isEnabled) {\n    yield new Promise(function (resolve) {\n      return setTimeout(resolve, 1000);\n    });\n    try {\n      var gate = mockData.getGateById(gateId);\n      if (!gate) {\n        throw new Error('Gate not found');\n      }\n      var updatedGate = _objectSpread(_objectSpread({}, gate), {}, {\n        isEnabled: isEnabled\n      });\n      return updatedGate;\n    } catch (error) {\n      console.error(`Error updating gate ${gateId} status:`, error);\n      throw error;\n    }\n  });\n  return function updateGateStatus(_x3, _x4) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var createGate = function () {\n  var _ref4 = _asyncToGenerator(function* (eventId, gateData) {\n    yield new Promise(function (resolve) {\n      return setTimeout(resolve, 1200);\n    });\n    try {\n      var newGate = _objectSpread(_objectSpread({\n        id: `gate-${Date.now()}`,\n        eventId: eventId\n      }, gateData), {}, {\n        isEnabled: true,\n        createdAt: new Date().toISOString()\n      });\n      return newGate;\n    } catch (error) {\n      console.error('Error creating gate:', error);\n      throw error;\n    }\n  });\n  return function createGate(_x5, _x6) {\n    return _ref4.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["mockData","getGatesByEvent","_ref","_asyncToGenerator","eventId","Promise","resolve","setTimeout","gates","getGatesByEventId","error","console","_x","apply","arguments","getGateById","_ref2","gateId","gate","Error","_x2","updateGateStatus","_ref3","isEnabled","updatedGate","_objectSpread","_x3","_x4","createGate","_ref4","gateData","newGate","id","Date","now","createdAt","toISOString","_x5","_x6"],"sources":["/home/runner/workspace/src/services/gateService.js"],"sourcesContent":["import * as mockData from './mockData';\n\n/**\n * Get gates for a specific event\n * @param {string} eventId - The event ID\n * @returns {Promise<Array>} - List of gates for the event\n */\nexport const getGatesByEvent = async (eventId) => {\n  // Simulate network request\n  await new Promise(resolve => setTimeout(resolve, 800));\n  \n  try {\n    // Get mock gate data - in a real app this would be a server request\n    const gates = mockData.getGatesByEventId(eventId);\n    return gates;\n  } catch (error) {\n    console.error(`Error fetching gates for event ${eventId}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Get gate by ID\n * @param {string} gateId - The gate ID\n * @returns {Promise<object>} - Gate details\n */\nexport const getGateById = async (gateId) => {\n  // Simulate network request\n  await new Promise(resolve => setTimeout(resolve, 500));\n  \n  try {\n    const gate = mockData.getGateById(gateId);\n    \n    if (!gate) {\n      throw new Error('Gate not found');\n    }\n    \n    return gate;\n  } catch (error) {\n    console.error(`Error fetching gate ${gateId}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Update gate status (enable/disable)\n * @param {string} gateId - The gate ID\n * @param {boolean} isEnabled - Whether the gate should be enabled\n * @returns {Promise<object>} - Updated gate\n */\nexport const updateGateStatus = async (gateId, isEnabled) => {\n  // Simulate network request\n  await new Promise(resolve => setTimeout(resolve, 1000));\n  \n  try {\n    // In a real app, this would update the gate status on the server\n    // For now, just return the updated gate object with the new status\n    const gate = mockData.getGateById(gateId);\n    \n    if (!gate) {\n      throw new Error('Gate not found');\n    }\n    \n    const updatedGate = { ...gate, isEnabled };\n    return updatedGate;\n  } catch (error) {\n    console.error(`Error updating gate ${gateId} status:`, error);\n    throw error;\n  }\n};\n\n/**\n * Create a new gate for an event\n * @param {string} eventId - The event ID\n * @param {object} gateData - The gate data\n * @returns {Promise<object>} - Created gate\n */\nexport const createGate = async (eventId, gateData) => {\n  // Simulate network request\n  await new Promise(resolve => setTimeout(resolve, 1200));\n  \n  try {\n    // In a real app, this would create a gate on the server\n    // For now, just return a mock new gate\n    const newGate = {\n      id: `gate-${Date.now()}`,\n      eventId,\n      ...gateData,\n      isEnabled: true,\n      createdAt: new Date().toISOString()\n    };\n    \n    return newGate;\n  } catch (error) {\n    console.error('Error creating gate:', error);\n    throw error;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}