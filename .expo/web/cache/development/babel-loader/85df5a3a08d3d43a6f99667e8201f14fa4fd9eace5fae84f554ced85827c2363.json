{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { createPermissionHook } from 'expo-modules-core';\nimport CameraManager from \"./ExpoCameraManager\";\nexport { default as CameraView } from \"./CameraView\";\nfunction getCameraPermissionsAsync() {\n  return _getCameraPermissionsAsync.apply(this, arguments);\n}\nfunction _getCameraPermissionsAsync() {\n  _getCameraPermissionsAsync = _asyncToGenerator(function* () {\n    return CameraManager.getCameraPermissionsAsync();\n  });\n  return _getCameraPermissionsAsync.apply(this, arguments);\n}\nfunction requestCameraPermissionsAsync() {\n  return _requestCameraPermissionsAsync.apply(this, arguments);\n}\nfunction _requestCameraPermissionsAsync() {\n  _requestCameraPermissionsAsync = _asyncToGenerator(function* () {\n    return CameraManager.requestCameraPermissionsAsync();\n  });\n  return _requestCameraPermissionsAsync.apply(this, arguments);\n}\nexport var useCameraPermissions = createPermissionHook({\n  getMethod: getCameraPermissionsAsync,\n  requestMethod: requestCameraPermissionsAsync\n});\nfunction getMicrophonePermissionsAsync() {\n  return _getMicrophonePermissionsAsync.apply(this, arguments);\n}\nfunction _getMicrophonePermissionsAsync() {\n  _getMicrophonePermissionsAsync = _asyncToGenerator(function* () {\n    return CameraManager.getMicrophonePermissionsAsync();\n  });\n  return _getMicrophonePermissionsAsync.apply(this, arguments);\n}\nfunction requestMicrophonePermissionsAsync() {\n  return _requestMicrophonePermissionsAsync.apply(this, arguments);\n}\nfunction _requestMicrophonePermissionsAsync() {\n  _requestMicrophonePermissionsAsync = _asyncToGenerator(function* () {\n    return CameraManager.requestMicrophonePermissionsAsync();\n  });\n  return _requestMicrophonePermissionsAsync.apply(this, arguments);\n}\nexport var useMicrophonePermissions = createPermissionHook({\n  getMethod: getMicrophonePermissionsAsync,\n  requestMethod: requestMicrophonePermissionsAsync\n});\nexport function scanFromURLAsync(_x) {\n  return _scanFromURLAsync.apply(this, arguments);\n}\nfunction _scanFromURLAsync() {\n  _scanFromURLAsync = _asyncToGenerator(function* (url) {\n    var barcodeTypes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ['qr'];\n    return CameraManager.scanFromURLAsync(url, barcodeTypes);\n  });\n  return _scanFromURLAsync.apply(this, arguments);\n}\nexport * from \"./Camera.types\";\nexport var Camera = {\n  getCameraPermissionsAsync: getCameraPermissionsAsync,\n  requestCameraPermissionsAsync: requestCameraPermissionsAsync,\n  getMicrophonePermissionsAsync: getMicrophonePermissionsAsync,\n  requestMicrophonePermissionsAsync: requestMicrophonePermissionsAsync,\n  scanFromURLAsync: scanFromURLAsync\n};","map":{"version":3,"names":["createPermissionHook","CameraManager","default","CameraView","getCameraPermissionsAsync","_getCameraPermissionsAsync","apply","arguments","_asyncToGenerator","requestCameraPermissionsAsync","_requestCameraPermissionsAsync","useCameraPermissions","getMethod","requestMethod","getMicrophonePermissionsAsync","_getMicrophonePermissionsAsync","requestMicrophonePermissionsAsync","_requestMicrophonePermissionsAsync","useMicrophonePermissions","scanFromURLAsync","_x","_scanFromURLAsync","url","barcodeTypes","length","undefined","Camera"],"sources":["/home/runner/workspace/node_modules/expo-camera/src/index.ts"],"sourcesContent":["import { createPermissionHook, PermissionResponse } from 'expo-modules-core';\n\nimport { BarcodeScanningResult, BarcodeType } from './Camera.types';\nimport CameraManager from './ExpoCameraManager';\n\nexport { default as CameraView } from './CameraView';\n\n// @needsAudit\n/**\n * Checks user's permissions for accessing camera.\n * @return A promise that resolves to an object of type [PermissionResponse](#permissionresponse).\n */\nasync function getCameraPermissionsAsync(): Promise<PermissionResponse> {\n  return CameraManager.getCameraPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Asks the user to grant permissions for accessing camera.\n * On iOS this will require apps to specify an `NSCameraUsageDescription` entry in the **Info.plist**.\n * @return A promise that resolves to an object of type [PermissionResponse](#permissionresponse).\n */\nasync function requestCameraPermissionsAsync(): Promise<PermissionResponse> {\n  return CameraManager.requestCameraPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Check or request permissions to access the camera.\n * This uses both `requestCameraPermissionsAsync` and `getCameraPermissionsAsync` to interact with the permissions.\n *\n * @example\n * ```ts\n * const [status, requestPermission] = useCameraPermissions();\n * ```\n */\nexport const useCameraPermissions = createPermissionHook({\n  getMethod: getCameraPermissionsAsync,\n  requestMethod: requestCameraPermissionsAsync,\n});\n\n// @needsAudit\n/**\n * Checks user's permissions for accessing microphone.\n * @return A promise that resolves to an object of type [PermissionResponse](#permissionresponse).\n */\nasync function getMicrophonePermissionsAsync(): Promise<PermissionResponse> {\n  return CameraManager.getMicrophonePermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Asks the user to grant permissions for accessing the microphone.\n * On iOS this will require apps to specify an `NSMicrophoneUsageDescription` entry in the **Info.plist**.\n * @return A promise that resolves to an object of type [PermissionResponse](#permissionresponse).\n */\nasync function requestMicrophonePermissionsAsync(): Promise<PermissionResponse> {\n  return CameraManager.requestMicrophonePermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Check or request permissions to access the microphone.\n * This uses both `requestMicrophonePermissionsAsync` and `getMicrophonePermissionsAsync` to interact with the permissions.\n *\n * @example\n * ```ts\n * const [status, requestPermission] = Camera.useMicrophonePermissions();\n * ```\n */\nexport const useMicrophonePermissions = createPermissionHook({\n  getMethod: getMicrophonePermissionsAsync,\n  requestMethod: requestMicrophonePermissionsAsync,\n});\n\n/**\n * Scan bar codes from the image at the given URL.\n * @param url URL to get the image from.\n * @param barcodeTypes An array of bar code types. Defaults to all supported bar code types on\n * the platform.\n * > __Note:__ Only QR codes are supported on iOS.\n * On android, the barcode should take up the majority of the image for best results.\n * @return A possibly empty array of objects of the `BarcodeScanningResult` shape, where the type\n * refers to the barcode type that was scanned and the data is the information encoded in the barcode.\n */\nexport async function scanFromURLAsync(\n  url: string,\n  barcodeTypes: BarcodeType[] = ['qr']\n): Promise<BarcodeScanningResult[]> {\n  return CameraManager.scanFromURLAsync(url, barcodeTypes);\n}\n\nexport * from './Camera.types';\n\n/**\n * @hidden\n */\nexport const Camera = {\n  getCameraPermissionsAsync,\n  requestCameraPermissionsAsync,\n  getMicrophonePermissionsAsync,\n  requestMicrophonePermissionsAsync,\n  scanFromURLAsync,\n};\n"],"mappings":";AAAA,SAASA,oBAAoB,QAA4B,mBAAmB;AAG5E,OAAOC,aAAa;AAEpB,SAASC,OAAO,IAAIC,UAAU;AAAuB,SAOtCC,yBAAyBA,CAAA;EAAA,OAAAC,0BAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,2BAAA;EAAAA,0BAAA,GAAAG,iBAAA,CAAxC,aAAwC;IACtC,OAAOP,aAAa,CAACG,yBAAyB,EAAE;EAClD,CAAC;EAAA,OAAAC,0BAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAQcE,6BAA6BA,CAAA;EAAA,OAAAC,8BAAA,CAAAJ,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAG,+BAAA;EAAAA,8BAAA,GAAAF,iBAAA,CAA5C,aAA4C;IAC1C,OAAOP,aAAa,CAACQ,6BAA6B,EAAE;EACtD,CAAC;EAAA,OAAAC,8BAAA,CAAAJ,KAAA,OAAAC,SAAA;AAAA;AAYD,OAAO,IAAMI,oBAAoB,GAAGX,oBAAoB,CAAC;EACvDY,SAAS,EAAER,yBAAyB;EACpCS,aAAa,EAAEJ;CAChB,CAAC;AAAC,SAOYK,6BAA6BA,CAAA;EAAA,OAAAC,8BAAA,CAAAT,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAQ,+BAAA;EAAAA,8BAAA,GAAAP,iBAAA,CAA5C,aAA4C;IAC1C,OAAOP,aAAa,CAACa,6BAA6B,EAAE;EACtD,CAAC;EAAA,OAAAC,8BAAA,CAAAT,KAAA,OAAAC,SAAA;AAAA;AAAA,SAQcS,iCAAiCA,CAAA;EAAA,OAAAC,kCAAA,CAAAX,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAU,mCAAA;EAAAA,kCAAA,GAAAT,iBAAA,CAAhD,aAAgD;IAC9C,OAAOP,aAAa,CAACe,iCAAiC,EAAE;EAC1D,CAAC;EAAA,OAAAC,kCAAA,CAAAX,KAAA,OAAAC,SAAA;AAAA;AAYD,OAAO,IAAMW,wBAAwB,GAAGlB,oBAAoB,CAAC;EAC3DY,SAAS,EAAEE,6BAA6B;EACxCD,aAAa,EAAEG;CAChB,CAAC;AAYF,gBAAsBG,gBAAgBA,CAAAC,EAAA;EAAA,OAAAC,iBAAA,CAAAf,KAAA,OAAAC,SAAA;AAAA;AAKrC,SAAAc,kBAAA;EAAAA,iBAAA,GAAAb,iBAAA,CALM,WACLc,GAAW,EACyB;IAAA,IAApCC,YAAA,GAAAhB,SAAA,CAAAiB,MAAA,QAAAjB,SAAA,QAAAkB,SAAA,GAAAlB,SAAA,MAA8B,CAAC,IAAI,CAAC;IAEpC,OAAON,aAAa,CAACkB,gBAAgB,CAACG,GAAG,EAAEC,YAAY,CAAC;EAC1D,CAAC;EAAA,OAAAF,iBAAA,CAAAf,KAAA,OAAAC,SAAA;AAAA;AAED;AAKA,OAAO,IAAMmB,MAAM,GAAG;EACpBtB,yBAAyB,EAAzBA,yBAAyB;EACzBK,6BAA6B,EAA7BA,6BAA6B;EAC7BK,6BAA6B,EAA7BA,6BAA6B;EAC7BE,iCAAiC,EAAjCA,iCAAiC;EACjCG,gBAAgB,EAAhBA;CACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}