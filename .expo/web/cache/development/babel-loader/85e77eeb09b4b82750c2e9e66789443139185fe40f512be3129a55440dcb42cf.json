{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport NetInfo from '@react-native-community/netinfo';\nimport * as syncService from \"../services/syncService\";\nimport * as asyncStorage from \"../utils/asyncStorage\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar NetworkContext = createContext();\nexport var useNetwork = function useNetwork() {\n  return useContext(NetworkContext);\n};\nexport var NetworkProvider = function NetworkProvider(_ref) {\n  var children = _ref.children;\n  var _useState = useState(true),\n    _useState2 = _slicedToArray(_useState, 2),\n    isConnected = _useState2[0],\n    setIsConnected = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isSyncing = _useState4[0],\n    setIsSyncing = _useState4[1];\n  var _useState5 = useState(0),\n    _useState6 = _slicedToArray(_useState5, 2),\n    pendingSyncCount = _useState6[0],\n    setPendingSyncCount = _useState6[1];\n  var _useState7 = useState(null),\n    _useState8 = _slicedToArray(_useState7, 2),\n    syncError = _useState8[0],\n    setSyncError = _useState8[1];\n  useEffect(function () {\n    var unsubscribe = NetInfo.addEventListener(function (state) {\n      var wasConnected = isConnected;\n      var nowConnected = state.isConnected;\n      setIsConnected(nowConnected);\n      if (!wasConnected && nowConnected) {\n        syncData();\n      }\n    });\n    updatePendingSyncCount();\n    return function () {\n      return unsubscribe();\n    };\n  }, []);\n  var updatePendingSyncCount = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        var pendingCheckIns = yield asyncStorage.getPendingCheckIns();\n        var pendingGateChanges = yield asyncStorage.getPendingGateStatusChanges();\n        setPendingSyncCount(pendingCheckIns.length + pendingGateChanges.length);\n      } catch (err) {\n        console.error(\"Error getting pending sync count:\", err);\n      }\n    });\n    return function updatePendingSyncCount() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var syncData = function () {\n    var _ref3 = _asyncToGenerator(function* () {\n      if (!isConnected || isSyncing) return;\n      try {\n        setIsSyncing(true);\n        setSyncError(null);\n        var pendingCheckIns = yield asyncStorage.getPendingCheckIns();\n        if (pendingCheckIns.length > 0) {\n          yield syncService.syncCheckIns(pendingCheckIns);\n          yield asyncStorage.clearPendingCheckIns();\n        }\n        var pendingGateChanges = yield asyncStorage.getPendingGateStatusChanges();\n        if (pendingGateChanges.length > 0) {\n          yield syncService.syncGateStatusChanges(pendingGateChanges);\n          yield asyncStorage.clearPendingGateStatusChanges();\n        }\n        yield updatePendingSyncCount();\n      } catch (err) {\n        setSyncError(err.message || 'Failed to sync data');\n        console.error(\"Sync error:\", err);\n      } finally {\n        setIsSyncing(false);\n      }\n    });\n    return function syncData() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  return _jsx(NetworkContext.Provider, {\n    value: {\n      isConnected: isConnected,\n      isSyncing: isSyncing,\n      pendingSyncCount: pendingSyncCount,\n      syncError: syncError,\n      syncData: syncData,\n      updatePendingSyncCount: updatePendingSyncCount\n    },\n    children: children\n  });\n};","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","NetInfo","syncService","asyncStorage","jsx","_jsx","NetworkContext","useNetwork","NetworkProvider","_ref","children","_useState","_useState2","_slicedToArray","isConnected","setIsConnected","_useState3","_useState4","isSyncing","setIsSyncing","_useState5","_useState6","pendingSyncCount","setPendingSyncCount","_useState7","_useState8","syncError","setSyncError","unsubscribe","addEventListener","state","wasConnected","nowConnected","syncData","updatePendingSyncCount","_ref2","_asyncToGenerator","pendingCheckIns","getPendingCheckIns","pendingGateChanges","getPendingGateStatusChanges","length","err","console","error","apply","arguments","_ref3","syncCheckIns","clearPendingCheckIns","syncGateStatusChanges","clearPendingGateStatusChanges","message","Provider","value"],"sources":["/home/runner/workspace/src/contexts/NetworkContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport NetInfo from '@react-native-community/netinfo';\nimport * as syncService from '../services/syncService';\nimport * as asyncStorage from '../utils/asyncStorage';\n\nconst NetworkContext = createContext();\n\nexport const useNetwork = () => useContext(NetworkContext);\n\nexport const NetworkProvider = ({ children }) => {\n  const [isConnected, setIsConnected] = useState(true);\n  const [isSyncing, setIsSyncing] = useState(false);\n  const [pendingSyncCount, setPendingSyncCount] = useState(0);\n  const [syncError, setSyncError] = useState(null);\n\n  useEffect(() => {\n    // Subscribe to network state changes\n    const unsubscribe = NetInfo.addEventListener(state => {\n      const wasConnected = isConnected;\n      const nowConnected = state.isConnected;\n      \n      setIsConnected(nowConnected);\n      \n      // If we've just regained connection, trigger a sync\n      if (!wasConnected && nowConnected) {\n        syncData();\n      }\n    });\n\n    // Get initial pending sync count\n    updatePendingSyncCount();\n\n    // Cleanup subscription on unmount\n    return () => unsubscribe();\n  }, []);\n\n  // Update the count of pending items to sync\n  const updatePendingSyncCount = async () => {\n    try {\n      const pendingCheckIns = await asyncStorage.getPendingCheckIns();\n      const pendingGateChanges = await asyncStorage.getPendingGateStatusChanges();\n      setPendingSyncCount(pendingCheckIns.length + pendingGateChanges.length);\n    } catch (err) {\n      console.error(\"Error getting pending sync count:\", err);\n    }\n  };\n\n  // Sync all pending data with the server\n  const syncData = async () => {\n    if (!isConnected || isSyncing) return;\n    \n    try {\n      setIsSyncing(true);\n      setSyncError(null);\n      \n      // Sync pending check-ins\n      const pendingCheckIns = await asyncStorage.getPendingCheckIns();\n      if (pendingCheckIns.length > 0) {\n        await syncService.syncCheckIns(pendingCheckIns);\n        await asyncStorage.clearPendingCheckIns();\n      }\n      \n      // Sync pending gate status changes\n      const pendingGateChanges = await asyncStorage.getPendingGateStatusChanges();\n      if (pendingGateChanges.length > 0) {\n        await syncService.syncGateStatusChanges(pendingGateChanges);\n        await asyncStorage.clearPendingGateStatusChanges();\n      }\n      \n      // Update the pending count after successful sync\n      await updatePendingSyncCount();\n    } catch (err) {\n      setSyncError(err.message || 'Failed to sync data');\n      console.error(\"Sync error:\", err);\n    } finally {\n      setIsSyncing(false);\n    }\n  };\n\n  return (\n    <NetworkContext.Provider value={{\n      isConnected,\n      isSyncing,\n      pendingSyncCount,\n      syncError,\n      syncData,\n      updatePendingSyncCount\n    }}>\n      {children}\n    </NetworkContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}