{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import React,{createContext,useState,useContext}from'react';import{validateTicket,validateTicketOffline}from\"../services/ticketService\";import{useNetwork}from\"./NetworkContext\";import{saveCheckInOffline}from\"../services/offlineStorage\";import{jsx as _jsx}from\"react/jsx-runtime\";export var ScanContext=createContext();export var ScanProvider=function ScanProvider(_ref){var children=_ref.children;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isScanning=_useState2[0],setIsScanning=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),scanResults=_useState4[0],setScanResults=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),scanHistory=_useState6[0],setScanHistory=_useState6[1];var _useState7=useState(null),_useState8=_slicedToArray(_useState7,2),error=_useState8[0],setError=_useState8[1];var _useNetwork=useNetwork(),isOfflineMode=_useNetwork.isOfflineMode;var resetScan=function resetScan(){setScanResults(null);setError(null);};var handleScan=function(){var _ref2=_asyncToGenerator(function*(scannedData,eventId,gateId){var rules=arguments.length>3&&arguments[3]!==undefined?arguments[3]:[];setError(null);setIsScanning(true);try{var results;if(isOfflineMode){results=validateTicketOffline(scannedData,eventId,gateId,rules);if(results.valid){yield saveCheckInOffline({ticketId:results.ticket.id,eventId:eventId,gateId:gateId,timestamp:new Date().toISOString(),valid:results.valid});}}else{results=yield validateTicket(scannedData,eventId,gateId);}setScanResults(results);if(results){var historyItem={id:Date.now().toString(),timestamp:new Date().toISOString(),ticketData:results.ticket||{scannedData:scannedData},valid:results.valid,reason:results.reason,offline:isOfflineMode};setScanHistory(function(prevHistory){return[historyItem].concat(_toConsumableArray(prevHistory));});}return results;}catch(err){console.error('Scan error:',err);setError(err.message||'Error processing scan');return{valid:false,reason:err.message||'Error processing scan'};}finally{setIsScanning(false);}});return function handleScan(_x,_x2,_x3){return _ref2.apply(this,arguments);};}();var clearHistory=function clearHistory(){setScanHistory([]);};return _jsx(ScanContext.Provider,{value:{isScanning:isScanning,scanResults:scanResults,scanHistory:scanHistory,error:error,handleScan:handleScan,resetScan:resetScan,clearHistory:clearHistory},children:children});};","map":{"version":3,"names":["React","createContext","useState","useContext","validateTicket","validateTicketOffline","useNetwork","saveCheckInOffline","jsx","_jsx","ScanContext","ScanProvider","_ref","children","_useState","_useState2","_slicedToArray","isScanning","setIsScanning","_useState3","_useState4","scanResults","setScanResults","_useState5","_useState6","scanHistory","setScanHistory","_useState7","_useState8","error","setError","_useNetwork","isOfflineMode","resetScan","handleScan","_ref2","_asyncToGenerator","scannedData","eventId","gateId","rules","arguments","length","undefined","results","valid","ticketId","ticket","id","timestamp","Date","toISOString","historyItem","now","toString","ticketData","reason","offline","prevHistory","concat","_toConsumableArray","err","console","message","_x","_x2","_x3","apply","clearHistory","Provider","value"],"sources":["/home/runner/workspace/src/contexts/ScanContext.js"],"sourcesContent":["import React, { createContext, useState, useContext } from 'react';\nimport { validateTicket, validateTicketOffline } from '../services/ticketService';\nimport { useNetwork } from './NetworkContext';\nimport { saveCheckInOffline } from '../services/offlineStorage';\n\nexport const ScanContext = createContext();\n\nexport const ScanProvider = ({ children }) => {\n  const [isScanning, setIsScanning] = useState(false);\n  const [scanResults, setScanResults] = useState(null);\n  const [scanHistory, setScanHistory] = useState([]);\n  const [error, setError] = useState(null);\n  const { isOfflineMode } = useNetwork();\n\n  // Reset scan state\n  const resetScan = () => {\n    setScanResults(null);\n    setError(null);\n  };\n\n  // Handle a scan\n  const handleScan = async (scannedData, eventId, gateId, rules = []) => {\n    setError(null);\n    setIsScanning(true);\n    \n    try {\n      let results;\n      \n      if (isOfflineMode) {\n        // Use offline validation\n        results = validateTicketOffline(scannedData, eventId, gateId, rules);\n        \n        // Save check-in for later sync\n        if (results.valid) {\n          await saveCheckInOffline({\n            ticketId: results.ticket.id,\n            eventId,\n            gateId,\n            timestamp: new Date().toISOString(),\n            valid: results.valid,\n          });\n        }\n      } else {\n        // Use online validation with API\n        results = await validateTicket(scannedData, eventId, gateId);\n      }\n      \n      // Store results\n      setScanResults(results);\n      \n      // Add to history\n      if (results) {\n        const historyItem = {\n          id: Date.now().toString(),\n          timestamp: new Date().toISOString(),\n          ticketData: results.ticket || { scannedData },\n          valid: results.valid,\n          reason: results.reason,\n          offline: isOfflineMode,\n        };\n        \n        setScanHistory(prevHistory => [historyItem, ...prevHistory]);\n      }\n      \n      return results;\n    } catch (err) {\n      console.error('Scan error:', err);\n      setError(err.message || 'Error processing scan');\n      return { valid: false, reason: err.message || 'Error processing scan' };\n    } finally {\n      setIsScanning(false);\n    }\n  };\n\n  // Clear scan history\n  const clearHistory = () => {\n    setScanHistory([]);\n  };\n\n  return (\n    <ScanContext.Provider\n      value={{\n        isScanning,\n        scanResults,\n        scanHistory,\n        error,\n        handleScan,\n        resetScan,\n        clearHistory,\n      }}\n    >\n      {children}\n    </ScanContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}