{"ast":null,"code":"import React from'react';import ActivityIndicator from\"react-native-web/dist/exports/ActivityIndicator\";import View from\"react-native-web/dist/exports/View\";import{createStackNavigator}from'@react-navigation/stack';import AuthNavigator from\"./AuthNavigator\";import AdminNavigator from\"./AdminNavigator\";import StaffNavigator from\"./StaffNavigator\";import VolunteerNavigator from\"./VolunteerNavigator\";import useAuth from\"../hooks/useAuth\";import{jsx as _jsx}from\"react/jsx-runtime\";var Stack=createStackNavigator();var AppNavigator=function AppNavigator(){var _useAuth=useAuth(),isLoading=_useAuth.isLoading,isAuthenticated=_useAuth.isAuthenticated,userRole=_useAuth.userRole,userInfo=_useAuth.userInfo,checkVolunteerShift=_useAuth.checkVolunteerShift;if(isLoading){return _jsx(View,{style:{flex:1,justifyContent:'center',alignItems:'center'},children:_jsx(ActivityIndicator,{size:\"large\"})});}var getNavigator=function getNavigator(){if(!isAuthenticated()){return _jsx(Stack.Screen,{name:\"Auth\",component:AuthNavigator,options:{headerShown:false}});}switch(userRole){case'admin':return _jsx(Stack.Screen,{name:\"Admin\",component:AdminNavigator,options:{headerShown:false}});case'staff':return _jsx(Stack.Screen,{name:\"Staff\",component:StaffNavigator,options:{headerShown:false}});case'volunteer':return _jsx(Stack.Screen,{name:\"Volunteer\",component:VolunteerNavigator,options:{headerShown:false}});default:return _jsx(Stack.Screen,{name:\"Auth\",component:AuthNavigator,options:{headerShown:false}});}};return _jsx(Stack.Navigator,{children:getNavigator()});};export default AppNavigator;","map":{"version":3,"names":["React","ActivityIndicator","View","createStackNavigator","AuthNavigator","AdminNavigator","StaffNavigator","VolunteerNavigator","useAuth","jsx","_jsx","Stack","AppNavigator","_useAuth","isLoading","isAuthenticated","userRole","userInfo","checkVolunteerShift","style","flex","justifyContent","alignItems","children","size","getNavigator","Screen","name","component","options","headerShown","Navigator"],"sources":["/home/runner/workspace/src/navigation/AppNavigator.js"],"sourcesContent":["import React from 'react';\nimport { ActivityIndicator, View } from 'react-native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport AuthNavigator from './AuthNavigator';\nimport AdminNavigator from './AdminNavigator';\nimport StaffNavigator from './StaffNavigator';\nimport VolunteerNavigator from './VolunteerNavigator';\nimport useAuth from '../hooks/useAuth';\n\nconst Stack = createStackNavigator();\n\nconst AppNavigator = () => {\n  const { isLoading, isAuthenticated, userRole, userInfo, checkVolunteerShift } = useAuth();\n\n  // Show loading screen while checking auth state\n  if (isLoading) {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <ActivityIndicator size=\"large\" />\n      </View>\n    );\n  }\n\n  // Determine which navigator to show based on auth state and user role\n  const getNavigator = () => {\n    if (!isAuthenticated()) {\n      return <Stack.Screen \n        name=\"Auth\" \n        component={AuthNavigator} \n        options={{ headerShown: false }} \n      />;\n    }\n\n    switch (userRole) {\n      case 'admin':\n        return <Stack.Screen \n          name=\"Admin\" \n          component={AdminNavigator} \n          options={{ headerShown: false }} \n        />;\n      case 'staff':\n        return <Stack.Screen \n          name=\"Staff\" \n          component={StaffNavigator} \n          options={{ headerShown: false }} \n        />;\n      case 'volunteer':\n        return <Stack.Screen \n          name=\"Volunteer\" \n          component={VolunteerNavigator} \n          options={{ headerShown: false }} \n        />;\n      default:\n        // Fallback to auth if role is unknown\n        return <Stack.Screen \n          name=\"Auth\" \n          component={AuthNavigator} \n          options={{ headerShown: false }} \n        />;\n    }\n  };\n\n  return (\n    <Stack.Navigator>\n      {getNavigator()}\n    </Stack.Navigator>\n  );\n};\n\nexport default AppNavigator;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAAC,OAAAC,iBAAA,8DAAAC,IAAA,0CAE1B,OAASC,oBAAoB,KAAQ,yBAAyB,CAC9D,MAAO,CAAAC,aAAa,uBACpB,MAAO,CAAAC,cAAc,wBACrB,MAAO,CAAAC,cAAc,wBACrB,MAAO,CAAAC,kBAAkB,4BACzB,MAAO,CAAAC,OAAO,wBAAyB,OAAAC,GAAA,IAAAC,IAAA,yBAEvC,GAAM,CAAAC,KAAK,CAAGR,oBAAoB,CAAC,CAAC,CAEpC,GAAM,CAAAS,YAAY,CAAG,QAAf,CAAAA,YAAYA,CAAA,CAAS,CACzB,IAAAC,QAAA,CAAgFL,OAAO,CAAC,CAAC,CAAjFM,SAAS,CAAAD,QAAA,CAATC,SAAS,CAAEC,eAAe,CAAAF,QAAA,CAAfE,eAAe,CAAEC,QAAQ,CAAAH,QAAA,CAARG,QAAQ,CAAEC,QAAQ,CAAAJ,QAAA,CAARI,QAAQ,CAAEC,mBAAmB,CAAAL,QAAA,CAAnBK,mBAAmB,CAG3E,GAAIJ,SAAS,CAAE,CACb,MACE,CAAAJ,IAAA,CAACR,IAAI,EAACiB,KAAK,CAAE,CAAEC,IAAI,CAAE,CAAC,CAAEC,cAAc,CAAE,QAAQ,CAAEC,UAAU,CAAE,QAAS,CAAE,CAAAC,QAAA,CACvEb,IAAA,CAACT,iBAAiB,EAACuB,IAAI,CAAC,OAAO,CAAE,CAAC,CAC9B,CAAC,CAEX,CAGA,GAAM,CAAAC,YAAY,CAAG,QAAf,CAAAA,YAAYA,CAAA,CAAS,CACzB,GAAI,CAACV,eAAe,CAAC,CAAC,CAAE,CACtB,MAAO,CAAAL,IAAA,CAACC,KAAK,CAACe,MAAM,EAClBC,IAAI,CAAC,MAAM,CACXC,SAAS,CAAExB,aAAc,CACzByB,OAAO,CAAE,CAAEC,WAAW,CAAE,KAAM,CAAE,CACjC,CAAC,CACJ,CAEA,OAAQd,QAAQ,EACd,IAAK,OAAO,CACV,MAAO,CAAAN,IAAA,CAACC,KAAK,CAACe,MAAM,EAClBC,IAAI,CAAC,OAAO,CACZC,SAAS,CAAEvB,cAAe,CAC1BwB,OAAO,CAAE,CAAEC,WAAW,CAAE,KAAM,CAAE,CACjC,CAAC,CACJ,IAAK,OAAO,CACV,MAAO,CAAApB,IAAA,CAACC,KAAK,CAACe,MAAM,EAClBC,IAAI,CAAC,OAAO,CACZC,SAAS,CAAEtB,cAAe,CAC1BuB,OAAO,CAAE,CAAEC,WAAW,CAAE,KAAM,CAAE,CACjC,CAAC,CACJ,IAAK,WAAW,CACd,MAAO,CAAApB,IAAA,CAACC,KAAK,CAACe,MAAM,EAClBC,IAAI,CAAC,WAAW,CAChBC,SAAS,CAAErB,kBAAmB,CAC9BsB,OAAO,CAAE,CAAEC,WAAW,CAAE,KAAM,CAAE,CACjC,CAAC,CACJ,QAEE,MAAO,CAAApB,IAAA,CAACC,KAAK,CAACe,MAAM,EAClBC,IAAI,CAAC,MAAM,CACXC,SAAS,CAAExB,aAAc,CACzByB,OAAO,CAAE,CAAEC,WAAW,CAAE,KAAM,CAAE,CACjC,CAAC,CACN,CACF,CAAC,CAED,MACE,CAAApB,IAAA,CAACC,KAAK,CAACoB,SAAS,EAAAR,QAAA,CACbE,YAAY,CAAC,CAAC,CACA,CAAC,CAEtB,CAAC,CAED,cAAe,CAAAb,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}