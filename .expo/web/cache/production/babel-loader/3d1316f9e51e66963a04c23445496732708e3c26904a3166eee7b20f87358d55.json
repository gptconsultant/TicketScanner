{"ast":null,"code":"import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import{createPermissionHook}from'expo-modules-core';import CameraManager from\"./ExpoCameraManager\";export{default as CameraView}from\"./CameraView\";function getCameraPermissionsAsync(){return _getCameraPermissionsAsync.apply(this,arguments);}function _getCameraPermissionsAsync(){_getCameraPermissionsAsync=_asyncToGenerator(function*(){return CameraManager.getCameraPermissionsAsync();});return _getCameraPermissionsAsync.apply(this,arguments);}function requestCameraPermissionsAsync(){return _requestCameraPermissionsAsync.apply(this,arguments);}function _requestCameraPermissionsAsync(){_requestCameraPermissionsAsync=_asyncToGenerator(function*(){return CameraManager.requestCameraPermissionsAsync();});return _requestCameraPermissionsAsync.apply(this,arguments);}export var useCameraPermissions=createPermissionHook({getMethod:getCameraPermissionsAsync,requestMethod:requestCameraPermissionsAsync});function getMicrophonePermissionsAsync(){return _getMicrophonePermissionsAsync.apply(this,arguments);}function _getMicrophonePermissionsAsync(){_getMicrophonePermissionsAsync=_asyncToGenerator(function*(){return CameraManager.getMicrophonePermissionsAsync();});return _getMicrophonePermissionsAsync.apply(this,arguments);}function requestMicrophonePermissionsAsync(){return _requestMicrophonePermissionsAsync.apply(this,arguments);}function _requestMicrophonePermissionsAsync(){_requestMicrophonePermissionsAsync=_asyncToGenerator(function*(){return CameraManager.requestMicrophonePermissionsAsync();});return _requestMicrophonePermissionsAsync.apply(this,arguments);}export var useMicrophonePermissions=createPermissionHook({getMethod:getMicrophonePermissionsAsync,requestMethod:requestMicrophonePermissionsAsync});export function scanFromURLAsync(_x){return _scanFromURLAsync.apply(this,arguments);}function _scanFromURLAsync(){_scanFromURLAsync=_asyncToGenerator(function*(url){var barcodeTypes=arguments.length>1&&arguments[1]!==undefined?arguments[1]:['qr'];return CameraManager.scanFromURLAsync(url,barcodeTypes);});return _scanFromURLAsync.apply(this,arguments);}export*from\"./Camera.types\";export var Camera={getCameraPermissionsAsync:getCameraPermissionsAsync,requestCameraPermissionsAsync:requestCameraPermissionsAsync,getMicrophonePermissionsAsync:getMicrophonePermissionsAsync,requestMicrophonePermissionsAsync:requestMicrophonePermissionsAsync,scanFromURLAsync:scanFromURLAsync};","map":{"version":3,"names":["createPermissionHook","CameraManager","default","CameraView","getCameraPermissionsAsync","_getCameraPermissionsAsync","apply","arguments","_asyncToGenerator","requestCameraPermissionsAsync","_requestCameraPermissionsAsync","useCameraPermissions","getMethod","requestMethod","getMicrophonePermissionsAsync","_getMicrophonePermissionsAsync","requestMicrophonePermissionsAsync","_requestMicrophonePermissionsAsync","useMicrophonePermissions","scanFromURLAsync","_x","_scanFromURLAsync","url","barcodeTypes","length","undefined","Camera"],"sources":["/home/runner/workspace/node_modules/expo-camera/src/index.ts"],"sourcesContent":["import { createPermissionHook, PermissionResponse } from 'expo-modules-core';\n\nimport { BarcodeScanningResult, BarcodeType } from './Camera.types';\nimport CameraManager from './ExpoCameraManager';\n\nexport { default as CameraView } from './CameraView';\n\n// @needsAudit\n/**\n * Checks user's permissions for accessing camera.\n * @return A promise that resolves to an object of type [PermissionResponse](#permissionresponse).\n */\nasync function getCameraPermissionsAsync(): Promise<PermissionResponse> {\n  return CameraManager.getCameraPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Asks the user to grant permissions for accessing camera.\n * On iOS this will require apps to specify an `NSCameraUsageDescription` entry in the **Info.plist**.\n * @return A promise that resolves to an object of type [PermissionResponse](#permissionresponse).\n */\nasync function requestCameraPermissionsAsync(): Promise<PermissionResponse> {\n  return CameraManager.requestCameraPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Check or request permissions to access the camera.\n * This uses both `requestCameraPermissionsAsync` and `getCameraPermissionsAsync` to interact with the permissions.\n *\n * @example\n * ```ts\n * const [status, requestPermission] = useCameraPermissions();\n * ```\n */\nexport const useCameraPermissions = createPermissionHook({\n  getMethod: getCameraPermissionsAsync,\n  requestMethod: requestCameraPermissionsAsync,\n});\n\n// @needsAudit\n/**\n * Checks user's permissions for accessing microphone.\n * @return A promise that resolves to an object of type [PermissionResponse](#permissionresponse).\n */\nasync function getMicrophonePermissionsAsync(): Promise<PermissionResponse> {\n  return CameraManager.getMicrophonePermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Asks the user to grant permissions for accessing the microphone.\n * On iOS this will require apps to specify an `NSMicrophoneUsageDescription` entry in the **Info.plist**.\n * @return A promise that resolves to an object of type [PermissionResponse](#permissionresponse).\n */\nasync function requestMicrophonePermissionsAsync(): Promise<PermissionResponse> {\n  return CameraManager.requestMicrophonePermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Check or request permissions to access the microphone.\n * This uses both `requestMicrophonePermissionsAsync` and `getMicrophonePermissionsAsync` to interact with the permissions.\n *\n * @example\n * ```ts\n * const [status, requestPermission] = Camera.useMicrophonePermissions();\n * ```\n */\nexport const useMicrophonePermissions = createPermissionHook({\n  getMethod: getMicrophonePermissionsAsync,\n  requestMethod: requestMicrophonePermissionsAsync,\n});\n\n/**\n * Scan bar codes from the image at the given URL.\n * @param url URL to get the image from.\n * @param barcodeTypes An array of bar code types. Defaults to all supported bar code types on\n * the platform.\n * > __Note:__ Only QR codes are supported on iOS.\n * On android, the barcode should take up the majority of the image for best results.\n * @return A possibly empty array of objects of the `BarcodeScanningResult` shape, where the type\n * refers to the barcode type that was scanned and the data is the information encoded in the barcode.\n */\nexport async function scanFromURLAsync(\n  url: string,\n  barcodeTypes: BarcodeType[] = ['qr']\n): Promise<BarcodeScanningResult[]> {\n  return CameraManager.scanFromURLAsync(url, barcodeTypes);\n}\n\nexport * from './Camera.types';\n\n/**\n * @hidden\n */\nexport const Camera = {\n  getCameraPermissionsAsync,\n  requestCameraPermissionsAsync,\n  getMicrophonePermissionsAsync,\n  requestMicrophonePermissionsAsync,\n  scanFromURLAsync,\n};\n"],"mappings":"uEAAA,OAASA,oBAAoB,KAA4B,mBAAmB,CAG5E,MAAO,CAAAC,aAAa,2BAEpB,OAASC,OAAO,GAAI,CAAAC,UAAU,oBAAuB,QAOtC,CAAAC,yBAAyBA,CAAA,SAAAC,0BAAA,CAAAC,KAAA,MAAAC,SAAA,YAAAF,2BAAA,EAAAA,0BAAA,CAAAG,iBAAA,CAAxC,WAAwC,CACtC,MAAO,CAAAP,aAAa,CAACG,yBAAyB,EAAE,CAClD,CAAC,SAAAC,0BAAA,CAAAC,KAAA,MAAAC,SAAA,WAQc,CAAAE,6BAA6BA,CAAA,SAAAC,8BAAA,CAAAJ,KAAA,MAAAC,SAAA,YAAAG,+BAAA,EAAAA,8BAAA,CAAAF,iBAAA,CAA5C,WAA4C,CAC1C,MAAO,CAAAP,aAAa,CAACQ,6BAA6B,EAAE,CACtD,CAAC,SAAAC,8BAAA,CAAAJ,KAAA,MAAAC,SAAA,GAYD,MAAO,IAAM,CAAAI,oBAAoB,CAAGX,oBAAoB,CAAC,CACvDY,SAAS,CAAER,yBAAyB,CACpCS,aAAa,CAAEJ,6B,CAChB,CAAC,CAAC,QAOY,CAAAK,6BAA6BA,CAAA,SAAAC,8BAAA,CAAAT,KAAA,MAAAC,SAAA,YAAAQ,+BAAA,EAAAA,8BAAA,CAAAP,iBAAA,CAA5C,WAA4C,CAC1C,MAAO,CAAAP,aAAa,CAACa,6BAA6B,EAAE,CACtD,CAAC,SAAAC,8BAAA,CAAAT,KAAA,MAAAC,SAAA,WAQc,CAAAS,iCAAiCA,CAAA,SAAAC,kCAAA,CAAAX,KAAA,MAAAC,SAAA,YAAAU,mCAAA,EAAAA,kCAAA,CAAAT,iBAAA,CAAhD,WAAgD,CAC9C,MAAO,CAAAP,aAAa,CAACe,iCAAiC,EAAE,CAC1D,CAAC,SAAAC,kCAAA,CAAAX,KAAA,MAAAC,SAAA,GAYD,MAAO,IAAM,CAAAW,wBAAwB,CAAGlB,oBAAoB,CAAC,CAC3DY,SAAS,CAAEE,6BAA6B,CACxCD,aAAa,CAAEG,iC,CAChB,CAAC,CAYF,eAAsB,CAAAG,gBAAgBA,CAAAC,EAAA,SAAAC,iBAAA,CAAAf,KAAA,MAAAC,SAAA,GAKrC,SAAAc,kBAAA,EAAAA,iBAAA,CAAAb,iBAAA,CALM,UACLc,GAAW,CACyB,IAApC,CAAAC,YAAA,CAAAhB,SAAA,CAAAiB,MAAA,IAAAjB,SAAA,MAAAkB,SAAA,CAAAlB,SAAA,IAA8B,CAAC,IAAI,CAAC,CAEpC,MAAO,CAAAN,aAAa,CAACkB,gBAAgB,CAACG,GAAG,CAAEC,YAAY,CAAC,CAC1D,CAAC,SAAAF,iBAAA,CAAAf,KAAA,MAAAC,SAAA,GAED,4BAKA,MAAO,IAAM,CAAAmB,MAAM,CAAG,CACpBtB,yBAAyB,CAAzBA,yBAAyB,CACzBK,6BAA6B,CAA7BA,6BAA6B,CAC7BK,6BAA6B,CAA7BA,6BAA6B,CAC7BE,iCAAiC,CAAjCA,iCAAiC,CACjCG,gBAAgB,CAAhBA,gB,CACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}