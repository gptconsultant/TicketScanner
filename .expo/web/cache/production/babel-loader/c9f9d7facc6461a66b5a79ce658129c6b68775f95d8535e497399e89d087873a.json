{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable;})),t.push.apply(t,o);}return t;}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r));});}return e;}import{useState,useEffect,useCallback}from'react';import Platform from\"react-native-web/dist/exports/Platform\";import DEFAULT_CONFIGURATION from\"./internal/defaultConfiguration\";import NativeInterface from\"./internal/nativeInterface\";import State from\"./internal/state\";import*as Types from\"./internal/types\";var _configuration=DEFAULT_CONFIGURATION;var _state=null;var createState=function createState(){return new State(_configuration);};var isRequestInProgress=false;var requestQueue=[];export function configure(configuration){_configuration=_objectSpread(_objectSpread({},DEFAULT_CONFIGURATION),configuration);if(_state){_state.tearDown();_state=createState();}if(Platform.OS==='ios'){NativeInterface.configure(configuration);}}export function fetch(requestedInterface){if(!_state){_state=createState();}return _state.latest(requestedInterface);}export function refresh(){if(!_state){_state=createState();}if(isRequestInProgress){return new Promise(function(resolve){requestQueue.push(resolve);});}isRequestInProgress=true;return _state._fetchCurrentState().then(function(result){requestQueue.forEach(function(resolve){return resolve(result);});requestQueue=[];return result;}).finally(function(){isRequestInProgress=false;});}export function addEventListener(listener){if(!_state){_state=createState();}_state.add(listener);return function(){_state&&_state.remove(listener);};}export function useNetInfo(configuration){if(configuration){configure(configuration);}var _useState=useState({type:Types.NetInfoStateType.unknown,isConnected:null,isInternetReachable:null,details:null}),_useState2=_slicedToArray(_useState,2),netInfo=_useState2[0],setNetInfo=_useState2[1];useEffect(function(){var unsubscribe=addEventListener(setNetInfo);return function(){return unsubscribe();};},[]);return netInfo;}export function useNetInfoInstance(){var isPaused=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;var configuration=arguments.length>1?arguments[1]:undefined;var _useState3=useState(),_useState4=_slicedToArray(_useState3,2),networkInfoManager=_useState4[0],setNetworkInfoManager=_useState4[1];var _useState5=useState({type:Types.NetInfoStateType.unknown,isConnected:null,isInternetReachable:null,details:null}),_useState6=_slicedToArray(_useState5,2),netInfo=_useState6[0],setNetInfo=_useState6[1];useEffect(function(){if(isPaused){return;}var config=_objectSpread(_objectSpread({},DEFAULT_CONFIGURATION),configuration);var state=new State(config);setNetworkInfoManager(state);state.add(setNetInfo);return state.tearDown;},[isPaused,configuration]);var refresh=useCallback(function(){if(networkInfoManager&&!isRequestInProgress){isRequestInProgress=true;networkInfoManager._fetchCurrentState().finally(function(){isRequestInProgress=false;});}},[networkInfoManager]);return{netInfo:netInfo,refresh:refresh};}export*from\"./internal/types\";export default{configure:configure,fetch:fetch,refresh:refresh,addEventListener:addEventListener,useNetInfo:useNetInfo,useNetInfoInstance:useNetInfoInstance};","map":{"version":3,"names":["useState","useEffect","useCallback","Platform","DEFAULT_CONFIGURATION","NativeInterface","State","Types","_configuration","_state","createState","isRequestInProgress","requestQueue","configure","configuration","_objectSpread","tearDown","OS","fetch","requestedInterface","latest","refresh","Promise","resolve","push","_fetchCurrentState","then","result","forEach","finally","addEventListener","listener","add","remove","useNetInfo","_useState","type","NetInfoStateType","unknown","isConnected","isInternetReachable","details","_useState2","_slicedToArray","netInfo","setNetInfo","unsubscribe","useNetInfoInstance","isPaused","arguments","length","undefined","_useState3","_useState4","networkInfoManager","setNetworkInfoManager","_useState5","_useState6","config","state"],"sources":["/home/runner/workspace/node_modules/@react-native-community/netinfo/lib/module/index.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {useState, useEffect, useCallback} from 'react';\nimport {Platform} from 'react-native';\nimport DEFAULT_CONFIGURATION from './internal/defaultConfiguration';\nimport NativeInterface from './internal/nativeInterface';\nimport State from './internal/state';\nimport * as Types from './internal/types';\n\n// Stores the currently used configuration\nlet _configuration = DEFAULT_CONFIGURATION;\n\n// Stores the singleton reference to the state manager\nlet _state: State | null = null;\nconst createState = (): State => {\n  return new State(_configuration);\n};\n\n// Track ongoing requests\nlet isRequestInProgress = false;\nlet requestQueue: ((state: Types.NetInfoState) => void)[] = [];\n\n/**\n * Configures the library with the given configuration. Note that calling this will stop all\n * previously added listeners from being called again. It is best to call this right when your\n * application is started to avoid issues. The configuration sets up a global singleton instance.\n *\n * @param configuration The new configuration to set.\n */\nexport function configure(\n  configuration: Partial<Types.NetInfoConfiguration>,\n): void {\n  _configuration = {\n    ...DEFAULT_CONFIGURATION,\n    ...configuration,\n  };\n\n  if (_state) {\n    _state.tearDown();\n    _state = createState();\n  }\n\n  if (Platform.OS === 'ios') {\n    NativeInterface.configure(configuration);\n  }\n}\n\n/**\n * Returns a `Promise` that resolves to a `NetInfoState` object.\n * This function operates on the global singleton instance configured using `configure()`\n *\n * @param [requestedInterface] interface from which to obtain the information\n *\n * @returns A Promise which contains the current connection state.\n */\nexport function fetch(\n  requestedInterface?: string,\n): Promise<Types.NetInfoState> {\n  if (!_state) {\n    _state = createState();\n  }\n  return _state.latest(requestedInterface);\n}\n\n/**\n * Force-refreshes the internal state of the global singleton managed by this library.\n *\n * @returns A Promise which contains the updated connection state.\n */\nexport function refresh(): Promise<Types.NetInfoState> {\n  if (!_state) {\n    _state = createState();\n  }\n\n // If a request is already in progress, return a promise that will resolve when the current request finishes\n  if (isRequestInProgress) {\n    return new Promise((resolve) => {\n      requestQueue.push(resolve);\n    });\n  }\n\n  isRequestInProgress = true;\n\n  return _state._fetchCurrentState().then((result) => {\n    requestQueue.forEach((resolve) => resolve(result));\n    requestQueue = [];\n    return result;\n  }).finally(() => {\n    isRequestInProgress = false;\n  });\n}\n\n/**\n * Subscribe to the global singleton's connection information. The callback is called with a parameter of type\n * [`NetInfoState`](README.md#netinfostate) whenever the connection state changes. Your listener\n * will be called with the latest information soon after you subscribe and then with any\n * subsequent changes afterwards. You should not assume that the listener is called in the same\n * way across devices or platforms.\n *\n * @param listener The listener which is called when the network state changes.\n *\n * @returns A function which can be called to unsubscribe.\n */\nexport function addEventListener(\n  listener: Types.NetInfoChangeHandler,\n): Types.NetInfoSubscription {\n  if (!_state) {\n    _state = createState();\n  }\n\n  _state.add(listener);\n  return (): void => {\n    _state && _state.remove(listener);\n  };\n}\n\n/**\n * A React Hook into this library's singleton which updates when the connection state changes.\n *\n * @param {Partial<Types.NetInfoConfiguration>} configuration - Configure the isolated network checker managed by this hook\n *\n * @returns The connection state.\n */\nexport function useNetInfo(\n  configuration?: Partial<Types.NetInfoConfiguration>,\n): Types.NetInfoState {\n  if (configuration) {\n    configure(configuration);\n  }\n\n  const [netInfo, setNetInfo] = useState<Types.NetInfoState>({\n    type: Types.NetInfoStateType.unknown,\n    isConnected: null,\n    isInternetReachable: null,\n    details: null,\n  });\n\n  useEffect((): (() => void) => {\n    const unsubscribe = addEventListener(setNetInfo);\n    return () => unsubscribe();\n  }, []);\n\n  return netInfo;\n}\n\n/**\n * A React Hook which manages an isolated instance of the network info manager.\n * This is not a hook into a singleton shared state. NetInfo.configure, NetInfo.addEventListener,\n * NetInfo.fetch, NetInfo.refresh are performed on a global singleton and have no affect on this hook.\n * @param {boolean} isPaused - Pause the internal network checks.\n * @param {Partial<Types.NetInfoConfiguration>} configuration - Configure the isolated network checker managed by this hook\n *\n * @returns the netInfo state and a refresh function\n */\nexport function useNetInfoInstance(\n  isPaused = false,\n  configuration?: Partial<Types.NetInfoConfiguration>,\n) {\n  const [networkInfoManager, setNetworkInfoManager] = useState<State>();\n  const [netInfo, setNetInfo] = useState<Types.NetInfoState>({\n    type: Types.NetInfoStateType.unknown,\n    isConnected: null,\n    isInternetReachable: null,\n    details: null,\n  });\n\n  useEffect(() => {\n    if (isPaused) {\n      return;\n    }\n    const config = {\n      ...DEFAULT_CONFIGURATION,\n      ...configuration,\n    };\n    const state = new State(config);\n    setNetworkInfoManager(state);\n    state.add(setNetInfo);\n    return state.tearDown;\n  }, [isPaused, configuration]);\n\n  const refresh = useCallback(() => {\n    if (networkInfoManager && !isRequestInProgress) {\n      isRequestInProgress = true;\n      networkInfoManager._fetchCurrentState().finally(() => {\n        isRequestInProgress = false;\n      });\n    }\n  }, [networkInfoManager]);\n\n  return {\n    netInfo,\n    refresh,\n  };\n}\n\nexport * from './internal/types';\n\nexport default {\n  configure,\n  fetch,\n  refresh,\n  addEventListener,\n  useNetInfo,\n  useNetInfoInstance,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}