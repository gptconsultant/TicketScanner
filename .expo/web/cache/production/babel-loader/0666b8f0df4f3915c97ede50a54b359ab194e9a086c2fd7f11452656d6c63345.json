{"ast":null,"code":"import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import{fetchFromAPI}from\"./api\";import*as mockData from\"./mockData\";export var login=function(){var _ref=_asyncToGenerator(function*(username,password){try{return yield mockData.mockLogin(username,password);}catch(error){throw new Error(error.message||'Login failed');}});return function login(_x,_x2){return _ref.apply(this,arguments);};}();export var logout=function(){var _ref2=_asyncToGenerator(function*(token){try{return yield mockData.mockLogout();}catch(error){throw new Error(error.message||'Logout failed');}});return function logout(_x3){return _ref2.apply(this,arguments);};}();export var getUserProfile=function(){var _ref3=_asyncToGenerator(function*(){try{throw new Error('Not implemented');}catch(error){throw new Error(error.message||'Failed to get user profile');}});return function getUserProfile(){return _ref3.apply(this,arguments);};}();export var validateToken=function(){var _ref4=_asyncToGenerator(function*(token){try{return true;}catch(error){return false;}});return function validateToken(_x4){return _ref4.apply(this,arguments);};}();","map":{"version":3,"names":["fetchFromAPI","mockData","login","_ref","_asyncToGenerator","username","password","mockLogin","error","Error","message","_x","_x2","apply","arguments","logout","_ref2","token","mockLogout","_x3","getUserProfile","_ref3","validateToken","_ref4","_x4"],"sources":["/home/runner/workspace/src/services/authService.js"],"sourcesContent":["import { fetchFromAPI } from './api';\nimport * as mockData from './mockData';\n\n/**\n * Login user with username and password\n * @param {string} username - User's username\n * @param {string} password - User's password\n * @returns {Promise<Object>} - Login result with token, role, and user info\n */\nexport const login = async (username, password) => {\n  // In a real app, this would call your backend API\n  try {\n    // For demo purposes, use mock implementation\n    return await mockData.mockLogin(username, password);\n    \n    // Real implementation:\n    // return await fetchFromAPI('/auth/login', {\n    //   method: 'POST',\n    //   headers: {\n    //     'Content-Type': 'application/json',\n    //   },\n    //   body: JSON.stringify({ username, password }),\n    // });\n  } catch (error) {\n    throw new Error(error.message || 'Login failed');\n  }\n};\n\n/**\n * Logout user\n * @param {string} token - User's auth token\n * @returns {Promise<Object>} - Logout result\n */\nexport const logout = async (token) => {\n  // In a real app, this would call your backend API\n  try {\n    // For demo purposes, use mock implementation\n    return await mockData.mockLogout();\n    \n    // Real implementation:\n    // return await fetchFromAPI('/auth/logout', {\n    //   method: 'POST',\n    //   headers: {\n    //     'Authorization': `Bearer ${token}`,\n    //   },\n    // }, token);\n  } catch (error) {\n    throw new Error(error.message || 'Logout failed');\n  }\n};\n\n/**\n * Get current user profile\n * @returns {Promise<Object>} - User profile data\n */\nexport const getUserProfile = async () => {\n  // In a real app, this would call your backend API\n  try {\n    // For demo purposes, this would be implemented with real API calls\n    // return await fetchFromAPI('/auth/profile', {\n    //   method: 'GET',\n    //   headers: {\n    //     'Authorization': `Bearer ${token}`,\n    //   },\n    // }, token);\n    \n    throw new Error('Not implemented');\n  } catch (error) {\n    throw new Error(error.message || 'Failed to get user profile');\n  }\n};\n\n/**\n * Check if token is valid\n * @param {string} token - User's auth token\n * @returns {Promise<boolean>} - Whether token is valid\n */\nexport const validateToken = async (token) => {\n  // In a real app, this would call your backend API\n  try {\n    // For demo purposes, this would be implemented with real API calls\n    // return await fetchFromAPI('/auth/validate', {\n    //   method: 'POST',\n    //   headers: {\n    //     'Content-Type': 'application/json',\n    //     'Authorization': `Bearer ${token}`,\n    //   },\n    // }, token);\n    \n    // For demo, just return true\n    return true;\n  } catch (error) {\n    // If token validation fails, return false\n    return false;\n  }\n};"],"mappings":"uEAAA,OAASA,YAAY,aACrB,MAAO,GAAK,CAAAC,QAAQ,kBAQpB,MAAO,IAAM,CAAAC,KAAK,gBAAAC,IAAA,CAAAC,iBAAA,CAAG,UAAOC,QAAQ,CAAEC,QAAQ,CAAK,CAEjD,GAAI,CAEF,YAAa,CAAAL,QAAQ,CAACM,SAAS,CAACF,QAAQ,CAAEC,QAAQ,CAAC,CAUrD,CAAE,MAAOE,KAAK,CAAE,CACd,KAAM,IAAI,CAAAC,KAAK,CAACD,KAAK,CAACE,OAAO,EAAI,cAAc,CAAC,CAClD,CACF,CAAC,iBAjBY,CAAAR,KAAKA,CAAAS,EAAA,CAAAC,GAAA,SAAAT,IAAA,CAAAU,KAAA,MAAAC,SAAA,OAiBjB,CAOD,MAAO,IAAM,CAAAC,MAAM,gBAAAC,KAAA,CAAAZ,iBAAA,CAAG,UAAOa,KAAK,CAAK,CAErC,GAAI,CAEF,YAAa,CAAAhB,QAAQ,CAACiB,UAAU,CAAC,CAAC,CASpC,CAAE,MAAOV,KAAK,CAAE,CACd,KAAM,IAAI,CAAAC,KAAK,CAACD,KAAK,CAACE,OAAO,EAAI,eAAe,CAAC,CACnD,CACF,CAAC,iBAhBY,CAAAK,MAAMA,CAAAI,GAAA,SAAAH,KAAA,CAAAH,KAAA,MAAAC,SAAA,OAgBlB,CAMD,MAAO,IAAM,CAAAM,cAAc,gBAAAC,KAAA,CAAAjB,iBAAA,CAAG,WAAY,CAExC,GAAI,CASF,KAAM,IAAI,CAAAK,KAAK,CAAC,iBAAiB,CAAC,CACpC,CAAE,MAAOD,KAAK,CAAE,CACd,KAAM,IAAI,CAAAC,KAAK,CAACD,KAAK,CAACE,OAAO,EAAI,4BAA4B,CAAC,CAChE,CACF,CAAC,iBAfY,CAAAU,cAAcA,CAAA,SAAAC,KAAA,CAAAR,KAAA,MAAAC,SAAA,OAe1B,CAOD,MAAO,IAAM,CAAAQ,aAAa,gBAAAC,KAAA,CAAAnB,iBAAA,CAAG,UAAOa,KAAK,CAAK,CAE5C,GAAI,CAWF,MAAO,KAAI,CACb,CAAE,MAAOT,KAAK,CAAE,CAEd,MAAO,MAAK,CACd,CACF,CAAC,iBAlBY,CAAAc,aAAaA,CAAAE,GAAA,SAAAD,KAAA,CAAAV,KAAA,MAAAC,SAAA,OAkBzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}