{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable;})),t.push.apply(t,o);}return t;}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r));});}return e;}export var mockLogin=function(){var _ref=_asyncToGenerator(function*(username,password){yield new Promise(function(resolve){return setTimeout(resolve,500);});var validCredentials=[{username:'admin',password:'password',role:'admin'},{username:'staff',password:'password',role:'staff'},{username:'volunteer',password:'password',role:'volunteer'}];var user=validCredentials.find(function(cred){return cred.username===username&&cred.password===password;});if(!user){throw new Error('Invalid credentials');}return{token:`mock-token-${user.role}-${Date.now()}`,role:user.role,user:{id:user.role==='admin'?1:user.role==='staff'?2:3,username:user.username,name:`${user.role.charAt(0).toUpperCase()+user.role.slice(1)} User`,email:`${user.username}@example.com`}};});return function mockLogin(_x,_x2){return _ref.apply(this,arguments);};}();export var mockLogout=function(){var _ref2=_asyncToGenerator(function*(){yield new Promise(function(resolve){return setTimeout(resolve,300);});return{success:true};});return function mockLogout(){return _ref2.apply(this,arguments);};}();export var mockFetchEvents=function(){var _ref3=_asyncToGenerator(function*(){yield new Promise(function(resolve){return setTimeout(resolve,800);});return[{id:1,name:'Summer Music Festival',date:'2025-06-15',location:'Central Park',isActive:true,expectedAttendees:5000,ticketsSold:3750},{id:2,name:'Tech Conference 2025',date:'2025-09-22',location:'Convention Center',isActive:true,expectedAttendees:2000,ticketsSold:1850},{id:3,name:'Holiday Craft Fair',date:'2025-12-10',location:'Community Hall',isActive:false,expectedAttendees:1000,ticketsSold:300}];});return function mockFetchEvents(){return _ref3.apply(this,arguments);};}();export var mockFetchGates=function(){var _ref4=_asyncToGenerator(function*(eventId){yield new Promise(function(resolve){return setTimeout(resolve,400);});var gatesByEvent={1:[{id:101,name:'Main Entrance',identifier:'GATE-A',isEnabled:true},{id:102,name:'VIP Entrance',identifier:'GATE-B',isEnabled:true},{id:103,name:'Staff Entrance',identifier:'GATE-C',isEnabled:true},{id:104,name:'West Side Entrance',identifier:'GATE-D',isEnabled:false}],2:[{id:201,name:'Front Entrance',identifier:'MAIN',isEnabled:true},{id:202,name:'Side Entrance',identifier:'SIDE',isEnabled:true}],3:[{id:301,name:'Main Hall Entrance',identifier:'HALL',isEnabled:true}]};return gatesByEvent[eventId]||[];});return function mockFetchGates(_x3){return _ref4.apply(this,arguments);};}();export var mockUpdateGateStatus=function(){var _ref5=_asyncToGenerator(function*(eventId,gateId,isEnabled){yield new Promise(function(resolve){return setTimeout(resolve,300);});return{success:true,gate:{id:gateId,isEnabled:isEnabled}};});return function mockUpdateGateStatus(_x4,_x5,_x6){return _ref5.apply(this,arguments);};}();export var mockCreateGate=function(){var _ref6=_asyncToGenerator(function*(eventId,name,identifier){yield new Promise(function(resolve){return setTimeout(resolve,500);});var newId=Math.floor(Math.random()*1000)+500;return{success:true,gate:{id:newId,name:name,identifier:identifier,isEnabled:true,eventId:eventId}};});return function mockCreateGate(_x7,_x8,_x9){return _ref6.apply(this,arguments);};}();export var mockDeleteGate=function(){var _ref7=_asyncToGenerator(function*(eventId,gateId){yield new Promise(function(resolve){return setTimeout(resolve,400);});return{success:true,message:`Gate ${gateId} deleted successfully`};});return function mockDeleteGate(_x10,_x11){return _ref7.apply(this,arguments);};}();export var mockFetchEventRules=function(){var _ref8=_asyncToGenerator(function*(eventId){yield new Promise(function(resolve){return setTimeout(resolve,600);});var rulesByEvent={1:[{id:1001,name:'VIP Access Only',type:'TICKET_TYPE_RESTRICTION',value:'VIP',isActive:true,gateIds:[102]},{id:1002,name:'One-time Entry',type:'ONE_TIME_USE',value:'true',isActive:true,gateIds:[101,102,103,104]},{id:1003,name:'Event Hours Only',type:'TIME_RESTRICTION',value:'08:00-23:00',isActive:true,gateIds:[101,102,103,104]}],2:[{id:2001,name:'One-time Entry',type:'ONE_TIME_USE',value:'true',isActive:true,gateIds:[201,202]}],3:[{id:3001,name:'Event Hours Only',type:'TIME_RESTRICTION',value:'09:00-17:00',isActive:true,gateIds:[301]}]};return rulesByEvent[eventId]||[];});return function mockFetchEventRules(_x12){return _ref8.apply(this,arguments);};}();export var mockCreateRule=function(){var _ref9=_asyncToGenerator(function*(eventId,name,type,value,isActive){yield new Promise(function(resolve){return setTimeout(resolve,500);});var newId=Math.floor(Math.random()*1000)+3000;return{success:true,rule:{id:newId,name:name,type:type,value:value,isActive:isActive,eventId:eventId,gateIds:[]}};});return function mockCreateRule(_x13,_x14,_x15,_x16,_x17){return _ref9.apply(this,arguments);};}();export var mockUpdateRule=function(){var _ref10=_asyncToGenerator(function*(eventId,rule){yield new Promise(function(resolve){return setTimeout(resolve,400);});return{success:true,rule:rule};});return function mockUpdateRule(_x18,_x19){return _ref10.apply(this,arguments);};}();export var mockDeleteRule=function(){var _ref11=_asyncToGenerator(function*(eventId,ruleId){yield new Promise(function(resolve){return setTimeout(resolve,400);});return{success:true,message:`Rule ${ruleId} deleted successfully`};});return function mockDeleteRule(_x20,_x21){return _ref11.apply(this,arguments);};}();export var mockUpdateEventStatus=function(){var _ref12=_asyncToGenerator(function*(eventId,isActive){yield new Promise(function(resolve){return setTimeout(resolve,300);});return{success:true,event:{id:eventId,isActive:isActive}};});return function mockUpdateEventStatus(_x22,_x23){return _ref12.apply(this,arguments);};}();export var mockCreateEvent=function(){var _ref13=_asyncToGenerator(function*(name,date){yield new Promise(function(resolve){return setTimeout(resolve,600);});var newId=Math.floor(Math.random()*100)+10;return{success:true,event:{id:newId,name:name,date:date,location:'',isActive:true,expectedAttendees:0,ticketsSold:0}};});return function mockCreateEvent(_x24,_x25){return _ref13.apply(this,arguments);};}();export var mockDeleteEvent=function(){var _ref14=_asyncToGenerator(function*(eventId){yield new Promise(function(resolve){return setTimeout(resolve,500);});return{success:true,message:`Event ${eventId} deleted successfully`};});return function mockDeleteEvent(_x26){return _ref14.apply(this,arguments);};}();export var mockValidateTicket=function(){var _ref15=_asyncToGenerator(function*(ticket,eventId,gateId){yield new Promise(function(resolve){return setTimeout(resolve,700);});var ticketData;try{if(typeof ticket==='string'){ticketData=JSON.parse(ticket);}else{ticketData=ticket;}}catch(e){return{valid:false,reason:'Invalid ticket format',ticket:null};}if(!ticketData.id||!ticketData.type||!ticketData.eventId){return{valid:false,reason:'Missing required ticket information',ticket:ticketData};}if(parseInt(ticketData.eventId)!==parseInt(eventId)){return{valid:false,reason:'Ticket is for a different event',ticket:ticketData};}var hasBeenUsedBefore=Math.random()>0.5;if(hasBeenUsedBefore&&ticketData.id%2===0){return{valid:false,reason:'Ticket has already been used',ticket:ticketData,checkInHistory:[{timestamp:new Date(Date.now()-3600000).toISOString(),gate:{id:gateId,name:`Gate ${gateId}`}}]};}var isVip=ticketData.type==='VIP'||ticketData.id%5===0;if(isVip&&eventId===1&&gateId!==102){return{valid:false,reason:'VIP tickets must use the VIP entrance (Gate B)',ticket:_objectSpread(_objectSpread({},ticketData),{},{type:'VIP'})};}var withinHours=true;return{valid:withinHours,ticket:_objectSpread(_objectSpread({},ticketData),{},{type:isVip?'VIP':ticketData.type||'STANDARD',holderName:ticketData.holderName||`Guest ${ticketData.id}`,seat:ticketData.seat||(isVip?`VIP-${Math.floor(Math.random()*100)}`:`A-${Math.floor(Math.random()*1000)}`)}),checkInHistory:[],checkInResult:{success:withinHours,timestamp:new Date().toISOString(),gate:{id:gateId,name:`Gate ${gateId}`}}};});return function mockValidateTicket(_x27,_x28,_x29){return _ref15.apply(this,arguments);};}();export var mockSyncCheckIns=function(){var _ref16=_asyncToGenerator(function*(checkIns){yield new Promise(function(resolve){return setTimeout(resolve,800);});return checkIns.map(function(checkIn){return{success:true,ticketId:checkIn.ticketId,serverTimestamp:new Date().toISOString()};});});return function mockSyncCheckIns(_x30){return _ref16.apply(this,arguments);};}();","map":{"version":3,"names":["mockLogin","_ref","_asyncToGenerator","username","password","Promise","resolve","setTimeout","validCredentials","role","user","find","cred","Error","token","Date","now","id","name","charAt","toUpperCase","slice","email","_x","_x2","apply","arguments","mockLogout","_ref2","success","mockFetchEvents","_ref3","date","location","isActive","expectedAttendees","ticketsSold","mockFetchGates","_ref4","eventId","gatesByEvent","identifier","isEnabled","_x3","mockUpdateGateStatus","_ref5","gateId","gate","_x4","_x5","_x6","mockCreateGate","_ref6","newId","Math","floor","random","_x7","_x8","_x9","mockDeleteGate","_ref7","message","_x10","_x11","mockFetchEventRules","_ref8","rulesByEvent","type","value","gateIds","_x12","mockCreateRule","_ref9","rule","_x13","_x14","_x15","_x16","_x17","mockUpdateRule","_ref10","_x18","_x19","mockDeleteRule","_ref11","ruleId","_x20","_x21","mockUpdateEventStatus","_ref12","event","_x22","_x23","mockCreateEvent","_ref13","_x24","_x25","mockDeleteEvent","_ref14","_x26","mockValidateTicket","_ref15","ticket","ticketData","JSON","parse","e","valid","reason","parseInt","hasBeenUsedBefore","checkInHistory","timestamp","toISOString","isVip","_objectSpread","withinHours","holderName","seat","checkInResult","_x27","_x28","_x29","mockSyncCheckIns","_ref16","checkIns","map","checkIn","ticketId","serverTimestamp","_x30"],"sources":["/home/runner/workspace/src/services/mockData.js"],"sourcesContent":["/**\n * Mock authentication function for demonstration purposes\n * @param {string} username - User's username\n * @param {string} password - User's password\n * @returns {Promise<Object>} - Mock authentication response\n */\nexport const mockLogin = async (username, password) => {\n  // Simulate network delay\n  await new Promise(resolve => setTimeout(resolve, 500));\n  \n  // Define valid credentials\n  const validCredentials = [\n    { username: 'admin', password: 'password', role: 'admin' },\n    { username: 'staff', password: 'password', role: 'staff' },\n    { username: 'volunteer', password: 'password', role: 'volunteer' }\n  ];\n  \n  // Find matching credentials\n  const user = validCredentials.find(\n    cred => cred.username === username && cred.password === password\n  );\n  \n  if (!user) {\n    throw new Error('Invalid credentials');\n  }\n  \n  // Return successful response\n  return {\n    token: `mock-token-${user.role}-${Date.now()}`,\n    role: user.role,\n    user: {\n      id: user.role === 'admin' ? 1 : user.role === 'staff' ? 2 : 3,\n      username: user.username,\n      name: `${user.role.charAt(0).toUpperCase() + user.role.slice(1)} User`,\n      email: `${user.username}@example.com`\n    }\n  };\n};\n\n/**\n * Mock logout function\n * @returns {Promise<Object>} - Mock logout response\n */\nexport const mockLogout = async () => {\n  // Simulate network delay\n  await new Promise(resolve => setTimeout(resolve, 300));\n  \n  // Return successful response\n  return { success: true };\n};\n\n/**\n * Mock function to fetch all events\n * @returns {Promise<Array>} - Array of mock events\n */\nexport const mockFetchEvents = async () => {\n  // Simulate network delay\n  await new Promise(resolve => setTimeout(resolve, 800));\n  \n  // Return mock events\n  return [\n    {\n      id: 1,\n      name: 'Summer Music Festival',\n      date: '2025-06-15',\n      location: 'Central Park',\n      isActive: true,\n      expectedAttendees: 5000,\n      ticketsSold: 3750\n    },\n    {\n      id: 2,\n      name: 'Tech Conference 2025',\n      date: '2025-09-22',\n      location: 'Convention Center',\n      isActive: true,\n      expectedAttendees: 2000,\n      ticketsSold: 1850\n    },\n    {\n      id: 3,\n      name: 'Holiday Craft Fair',\n      date: '2025-12-10',\n      location: 'Community Hall',\n      isActive: false,\n      expectedAttendees: 1000,\n      ticketsSold: 300\n    }\n  ];\n};\n\n/**\n * Mock function to fetch gates for a specific event\n * @param {number} eventId - ID of the event\n * @returns {Promise<Array>} - Array of mock gates\n */\nexport const mockFetchGates = async (eventId) => {\n  // Simulate network delay\n  await new Promise(resolve => setTimeout(resolve, 400));\n  \n  // Return mock gates based on event ID\n  const gatesByEvent = {\n    1: [\n      { id: 101, name: 'Main Entrance', identifier: 'GATE-A', isEnabled: true },\n      { id: 102, name: 'VIP Entrance', identifier: 'GATE-B', isEnabled: true },\n      { id: 103, name: 'Staff Entrance', identifier: 'GATE-C', isEnabled: true },\n      { id: 104, name: 'West Side Entrance', identifier: 'GATE-D', isEnabled: false }\n    ],\n    2: [\n      { id: 201, name: 'Front Entrance', identifier: 'MAIN', isEnabled: true },\n      { id: 202, name: 'Side Entrance', identifier: 'SIDE', isEnabled: true }\n    ],\n    3: [\n      { id: 301, name: 'Main Hall Entrance', identifier: 'HALL', isEnabled: true }\n    ]\n  };\n  \n  return gatesByEvent[eventId] || [];\n};\n\n/**\n * Mock function to update gate status\n * @param {number} eventId - Event ID\n * @param {number} gateId - Gate ID\n * @param {boolean} isEnabled - New gate status\n * @returns {Promise<Object>} - Result object\n */\nexport const mockUpdateGateStatus = async (eventId, gateId, isEnabled) => {\n  // Simulate network delay\n  await new Promise(resolve => setTimeout(resolve, 300));\n  \n  // Return success result\n  return { \n    success: true,\n    gate: {\n      id: gateId,\n      isEnabled\n    }\n  };\n};\n\n/**\n * Mock function to create a new gate\n * @param {number} eventId - Event ID\n * @param {string} name - Gate name\n * @param {string} identifier - Gate identifier\n * @returns {Promise<Object>} - New gate object\n */\nexport const mockCreateGate = async (eventId, name, identifier) => {\n  // Simulate network delay\n  await new Promise(resolve => setTimeout(resolve, 500));\n  \n  // Generate a new ID\n  const newId = Math.floor(Math.random() * 1000) + 500;\n  \n  // Return new gate\n  return {\n    success: true,\n    gate: {\n      id: newId,\n      name,\n      identifier,\n      isEnabled: true,\n      eventId\n    }\n  };\n};\n\n/**\n * Mock function to delete a gate\n * @param {number} eventId - Event ID\n * @param {number} gateId - Gate ID\n * @returns {Promise<Object>} - Result object\n */\nexport const mockDeleteGate = async (eventId, gateId) => {\n  // Simulate network delay\n  await new Promise(resolve => setTimeout(resolve, 400));\n  \n  // Return success result\n  return { \n    success: true,\n    message: `Gate ${gateId} deleted successfully`\n  };\n};\n\n/**\n * Mock function to fetch event rules\n * @param {number} eventId - Event ID\n * @returns {Promise<Array>} - Array of mock rules\n */\nexport const mockFetchEventRules = async (eventId) => {\n  // Simulate network delay\n  await new Promise(resolve => setTimeout(resolve, 600));\n  \n  // Return mock rules based on event ID\n  const rulesByEvent = {\n    1: [\n      { \n        id: 1001, \n        name: 'VIP Access Only', \n        type: 'TICKET_TYPE_RESTRICTION', \n        value: 'VIP', \n        isActive: true,\n        gateIds: [102] // Only applies to VIP entrance\n      },\n      { \n        id: 1002, \n        name: 'One-time Entry', \n        type: 'ONE_TIME_USE', \n        value: 'true', \n        isActive: true,\n        gateIds: [101, 102, 103, 104] // Applies to all gates\n      },\n      { \n        id: 1003, \n        name: 'Event Hours Only', \n        type: 'TIME_RESTRICTION', \n        value: '08:00-23:00', \n        isActive: true,\n        gateIds: [101, 102, 103, 104] // Applies to all gates\n      }\n    ],\n    2: [\n      { \n        id: 2001, \n        name: 'One-time Entry', \n        type: 'ONE_TIME_USE', \n        value: 'true', \n        isActive: true,\n        gateIds: [201, 202] // Applies to all gates\n      }\n    ],\n    3: [\n      { \n        id: 3001, \n        name: 'Event Hours Only', \n        type: 'TIME_RESTRICTION', \n        value: '09:00-17:00', \n        isActive: true,\n        gateIds: [301] // Applies to all gates\n      }\n    ]\n  };\n  \n  return rulesByEvent[eventId] || [];\n};\n\n/**\n * Mock function to create a new rule\n * @param {number} eventId - Event ID\n * @param {string} name - Rule name\n * @param {string} type - Rule type\n * @param {string} value - Rule value\n * @param {boolean} isActive - Whether rule is active\n * @returns {Promise<Object>} - New rule object\n */\nexport const mockCreateRule = async (eventId, name, type, value, isActive) => {\n  // Simulate network delay\n  await new Promise(resolve => setTimeout(resolve, 500));\n  \n  // Generate a new ID\n  const newId = Math.floor(Math.random() * 1000) + 3000;\n  \n  // Return new rule\n  return {\n    success: true,\n    rule: {\n      id: newId,\n      name,\n      type,\n      value,\n      isActive,\n      eventId,\n      gateIds: [] // Default to no gates\n    }\n  };\n};\n\n/**\n * Mock function to update a rule\n * @param {number} eventId - Event ID\n * @param {Object} rule - Updated rule object\n * @returns {Promise<Object>} - Result object\n */\nexport const mockUpdateRule = async (eventId, rule) => {\n  // Simulate network delay\n  await new Promise(resolve => setTimeout(resolve, 400));\n  \n  // Return success result\n  return { \n    success: true,\n    rule\n  };\n};\n\n/**\n * Mock function to delete a rule\n * @param {number} eventId - Event ID\n * @param {number} ruleId - Rule ID\n * @returns {Promise<Object>} - Result object\n */\nexport const mockDeleteRule = async (eventId, ruleId) => {\n  // Simulate network delay\n  await new Promise(resolve => setTimeout(resolve, 400));\n  \n  // Return success result\n  return { \n    success: true,\n    message: `Rule ${ruleId} deleted successfully`\n  };\n};\n\n/**\n * Mock function to update event status\n * @param {number} eventId - Event ID\n * @param {boolean} isActive - New event status\n * @returns {Promise<Object>} - Result object\n */\nexport const mockUpdateEventStatus = async (eventId, isActive) => {\n  // Simulate network delay\n  await new Promise(resolve => setTimeout(resolve, 300));\n  \n  // Return success result\n  return { \n    success: true,\n    event: {\n      id: eventId,\n      isActive\n    }\n  };\n};\n\n/**\n * Mock function to create a new event\n * @param {string} name - Event name\n * @param {string} date - Event date\n * @returns {Promise<Object>} - New event object\n */\nexport const mockCreateEvent = async (name, date) => {\n  // Simulate network delay\n  await new Promise(resolve => setTimeout(resolve, 600));\n  \n  // Generate a new ID\n  const newId = Math.floor(Math.random() * 100) + 10;\n  \n  // Return new event\n  return {\n    success: true,\n    event: {\n      id: newId,\n      name,\n      date,\n      location: '',\n      isActive: true,\n      expectedAttendees: 0,\n      ticketsSold: 0\n    }\n  };\n};\n\n/**\n * Mock function to delete an event\n * @param {number} eventId - Event ID\n * @returns {Promise<Object>} - Result object\n */\nexport const mockDeleteEvent = async (eventId) => {\n  // Simulate network delay\n  await new Promise(resolve => setTimeout(resolve, 500));\n  \n  // Return success result\n  return { \n    success: true,\n    message: `Event ${eventId} deleted successfully`\n  };\n};\n\n/**\n * Mock function to validate a ticket\n * @param {string} ticket - Ticket data (QR code content)\n * @param {number} eventId - Event ID\n * @param {number} gateId - Gate ID\n * @returns {Promise<Object>} - Validation result\n */\nexport const mockValidateTicket = async (ticket, eventId, gateId) => {\n  // Simulate network delay\n  await new Promise(resolve => setTimeout(resolve, 700));\n  \n  // Parse the ticket data\n  let ticketData;\n  try {\n    if (typeof ticket === 'string') {\n      ticketData = JSON.parse(ticket);\n    } else {\n      ticketData = ticket;\n    }\n  } catch (e) {\n    return {\n      valid: false,\n      reason: 'Invalid ticket format',\n      ticket: null\n    };\n  }\n  \n  // Validate ticket fields\n  if (!ticketData.id || !ticketData.type || !ticketData.eventId) {\n    return {\n      valid: false,\n      reason: 'Missing required ticket information',\n      ticket: ticketData\n    };\n  }\n  \n  // Check if ticket is for this event\n  if (parseInt(ticketData.eventId) !== parseInt(eventId)) {\n    return {\n      valid: false,\n      reason: 'Ticket is for a different event',\n      ticket: ticketData\n    };\n  }\n  \n  // Check if ticket has been used before (50% chance for demo)\n  const hasBeenUsedBefore = Math.random() > 0.5;\n  if (hasBeenUsedBefore && ticketData.id % 2 === 0) {\n    return {\n      valid: false,\n      reason: 'Ticket has already been used',\n      ticket: ticketData,\n      checkInHistory: [\n        {\n          timestamp: new Date(Date.now() - 3600000).toISOString(),\n          gate: { id: gateId, name: `Gate ${gateId}` }\n        }\n      ]\n    };\n  }\n  \n  // Randomly determine if VIP ticket for demo purposes\n  const isVip = ticketData.type === 'VIP' || ticketData.id % 5 === 0;\n  \n  // VIP tickets can only enter VIP gate\n  if (isVip && eventId === 1 && gateId !== 102) {\n    return {\n      valid: false,\n      reason: 'VIP tickets must use the VIP entrance (Gate B)',\n      ticket: {\n        ...ticketData,\n        type: 'VIP'\n      }\n    };\n  }\n  \n  // Check if within event hours (always pass for demo)\n  const withinHours = true;\n  \n  // Return validation result\n  return {\n    valid: withinHours,\n    ticket: {\n      ...ticketData,\n      type: isVip ? 'VIP' : ticketData.type || 'STANDARD',\n      holderName: ticketData.holderName || `Guest ${ticketData.id}`,\n      seat: ticketData.seat || (isVip ? `VIP-${Math.floor(Math.random() * 100)}` : `A-${Math.floor(Math.random() * 1000)}`)\n    },\n    checkInHistory: [],\n    checkInResult: {\n      success: withinHours,\n      timestamp: new Date().toISOString(),\n      gate: { id: gateId, name: `Gate ${gateId}` }\n    }\n  };\n};\n\n/**\n * Mock function to sync check-ins\n * @param {Array} checkIns - Array of check-in objects\n * @returns {Promise<Array>} - Array of sync results\n */\nexport const mockSyncCheckIns = async (checkIns) => {\n  // Simulate network delay\n  await new Promise(resolve => setTimeout(resolve, 800));\n  \n  // Process each check-in and return results\n  return checkIns.map(checkIn => ({\n    success: true,\n    ticketId: checkIn.ticketId,\n    serverTimestamp: new Date().toISOString()\n  }));\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}