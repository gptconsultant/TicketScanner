{"ast":null,"code":"import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import{fetchFromAPI}from\"./api\";import*as mockData from\"./mockData\";export var fetchEvents=function(){var _ref=_asyncToGenerator(function*(){try{return yield mockData.mockFetchEvents();}catch(error){console.error('Error fetching events:',error);throw error;}});return function fetchEvents(){return _ref.apply(this,arguments);};}();export var fetchGates=function(){var _ref2=_asyncToGenerator(function*(eventId){try{return yield mockData.mockFetchGates(eventId);}catch(error){console.error(`Error fetching gates for event ${eventId}:`,error);throw error;}});return function fetchGates(_x){return _ref2.apply(this,arguments);};}();export var updateGateStatus=function(){var _ref3=_asyncToGenerator(function*(eventId,gateId,isEnabled){try{return yield mockData.mockUpdateGateStatus(eventId,gateId,isEnabled);}catch(error){console.error(`Error updating gate ${gateId} status for event ${eventId}:`,error);throw error;}});return function updateGateStatus(_x2,_x3,_x4){return _ref3.apply(this,arguments);};}();export var createGate=function(){var _ref4=_asyncToGenerator(function*(eventId,name,identifier){try{return yield mockData.mockCreateGate(eventId,name,identifier);}catch(error){console.error(`Error creating gate for event ${eventId}:`,error);throw error;}});return function createGate(_x5,_x6,_x7){return _ref4.apply(this,arguments);};}();export var deleteGate=function(){var _ref5=_asyncToGenerator(function*(eventId,gateId){try{return yield mockData.mockDeleteGate(eventId,gateId);}catch(error){console.error(`Error deleting gate ${gateId} for event ${eventId}:`,error);throw error;}});return function deleteGate(_x8,_x9){return _ref5.apply(this,arguments);};}();export var fetchEventRules=function(){var _ref6=_asyncToGenerator(function*(eventId){try{return yield mockData.mockFetchEventRules(eventId);}catch(error){console.error(`Error fetching rules for event ${eventId}:`,error);throw error;}});return function fetchEventRules(_x10){return _ref6.apply(this,arguments);};}();export var createRule=function(){var _ref7=_asyncToGenerator(function*(eventId,name,type,value,isActive){try{return yield mockData.mockCreateRule(eventId,name,type,value,isActive);}catch(error){console.error(`Error creating rule for event ${eventId}:`,error);throw error;}});return function createRule(_x11,_x12,_x13,_x14,_x15){return _ref7.apply(this,arguments);};}();export var updateRule=function(){var _ref8=_asyncToGenerator(function*(eventId,rule){try{return yield mockData.mockUpdateRule(eventId,rule);}catch(error){console.error(`Error updating rule ${rule.id} for event ${eventId}:`,error);throw error;}});return function updateRule(_x16,_x17){return _ref8.apply(this,arguments);};}();export var deleteRule=function(){var _ref9=_asyncToGenerator(function*(eventId,ruleId){try{return yield mockData.mockDeleteRule(eventId,ruleId);}catch(error){console.error(`Error deleting rule ${ruleId} for event ${eventId}:`,error);throw error;}});return function deleteRule(_x18,_x19){return _ref9.apply(this,arguments);};}();export var updateEventStatus=function(){var _ref10=_asyncToGenerator(function*(eventId,isActive){try{return yield mockData.mockUpdateEventStatus(eventId,isActive);}catch(error){console.error(`Error updating event ${eventId} status:`,error);throw error;}});return function updateEventStatus(_x20,_x21){return _ref10.apply(this,arguments);};}();export var createEvent=function(){var _ref11=_asyncToGenerator(function*(name,date){try{return yield mockData.mockCreateEvent(name,date);}catch(error){console.error('Error creating event:',error);throw error;}});return function createEvent(_x22,_x23){return _ref11.apply(this,arguments);};}();export var deleteEvent=function(){var _ref12=_asyncToGenerator(function*(eventId){try{return yield mockData.mockDeleteEvent(eventId);}catch(error){console.error(`Error deleting event ${eventId}:`,error);throw error;}});return function deleteEvent(_x24){return _ref12.apply(this,arguments);};}();","map":{"version":3,"names":["fetchFromAPI","mockData","fetchEvents","_ref","_asyncToGenerator","mockFetchEvents","error","console","apply","arguments","fetchGates","_ref2","eventId","mockFetchGates","_x","updateGateStatus","_ref3","gateId","isEnabled","mockUpdateGateStatus","_x2","_x3","_x4","createGate","_ref4","name","identifier","mockCreateGate","_x5","_x6","_x7","deleteGate","_ref5","mockDeleteGate","_x8","_x9","fetchEventRules","_ref6","mockFetchEventRules","_x10","createRule","_ref7","type","value","isActive","mockCreateRule","_x11","_x12","_x13","_x14","_x15","updateRule","_ref8","rule","mockUpdateRule","id","_x16","_x17","deleteRule","_ref9","ruleId","mockDeleteRule","_x18","_x19","updateEventStatus","_ref10","mockUpdateEventStatus","_x20","_x21","createEvent","_ref11","date","mockCreateEvent","_x22","_x23","deleteEvent","_ref12","mockDeleteEvent","_x24"],"sources":["/home/runner/workspace/src/services/eventService.js"],"sourcesContent":["import { fetchFromAPI } from './api';\nimport * as mockData from './mockData';\n\n/**\n * Fetch all events\n * @returns {Promise<Object>} - Events data\n */\nexport const fetchEvents = async () => {\n  try {\n    // In a real app, this would call your backend API\n    // return await fetchFromAPI('/events');\n    \n    // For demo purposes, use mock implementation\n    return await mockData.mockFetchEvents();\n  } catch (error) {\n    console.error('Error fetching events:', error);\n    throw error;\n  }\n};\n\n/**\n * Fetch gates for a specific event\n * @param {number} eventId - Event ID\n * @returns {Promise<Object>} - Gates data\n */\nexport const fetchGates = async (eventId) => {\n  try {\n    // In a real app, this would call your backend API\n    // return await fetchFromAPI(`/events/${eventId}/gates`);\n    \n    // For demo purposes, use mock implementation\n    return await mockData.mockFetchGates(eventId);\n  } catch (error) {\n    console.error(`Error fetching gates for event ${eventId}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Update gate status (enable/disable)\n * @param {number} eventId - Event ID\n * @param {number} gateId - Gate ID\n * @param {boolean} isEnabled - Whether gate is enabled\n * @returns {Promise<Object>} - Update result\n */\nexport const updateGateStatus = async (eventId, gateId, isEnabled) => {\n  try {\n    // In a real app, this would call your backend API\n    // return await fetchFromAPI(`/events/${eventId}/gates/${gateId}`, {\n    //   method: 'PATCH',\n    //   headers: {\n    //     'Content-Type': 'application/json',\n    //   },\n    //   body: JSON.stringify({ isEnabled }),\n    // });\n    \n    // For demo purposes, use mock implementation\n    return await mockData.mockUpdateGateStatus(eventId, gateId, isEnabled);\n  } catch (error) {\n    console.error(`Error updating gate ${gateId} status for event ${eventId}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Create a new gate for an event\n * @param {number} eventId - Event ID\n * @param {string} name - Gate name\n * @param {string} identifier - Gate identifier (e.g., \"Gate A\")\n * @returns {Promise<Object>} - Create result with new gate data\n */\nexport const createGate = async (eventId, name, identifier) => {\n  try {\n    // In a real app, this would call your backend API\n    // return await fetchFromAPI(`/events/${eventId}/gates`, {\n    //   method: 'POST',\n    //   headers: {\n    //     'Content-Type': 'application/json',\n    //   },\n    //   body: JSON.stringify({ name, identifier }),\n    // });\n    \n    // For demo purposes, use mock implementation\n    return await mockData.mockCreateGate(eventId, name, identifier);\n  } catch (error) {\n    console.error(`Error creating gate for event ${eventId}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Delete a gate\n * @param {number} eventId - Event ID\n * @param {number} gateId - Gate ID\n * @returns {Promise<Object>} - Delete result\n */\nexport const deleteGate = async (eventId, gateId) => {\n  try {\n    // In a real app, this would call your backend API\n    // return await fetchFromAPI(`/events/${eventId}/gates/${gateId}`, {\n    //   method: 'DELETE',\n    // });\n    \n    // For demo purposes, use mock implementation\n    return await mockData.mockDeleteGate(eventId, gateId);\n  } catch (error) {\n    console.error(`Error deleting gate ${gateId} for event ${eventId}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Fetch event rules\n * @param {number} eventId - Event ID\n * @returns {Promise<Object>} - Rules data\n */\nexport const fetchEventRules = async (eventId) => {\n  try {\n    // In a real app, this would call your backend API\n    // return await fetchFromAPI(`/events/${eventId}/rules`);\n    \n    // For demo purposes, use mock implementation\n    return await mockData.mockFetchEventRules(eventId);\n  } catch (error) {\n    console.error(`Error fetching rules for event ${eventId}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Create a new rule for an event\n * @param {number} eventId - Event ID\n * @param {string} name - Rule name\n * @param {string} type - Rule type (e.g., TIME_RESTRICTION)\n * @param {string} value - Rule value\n * @param {boolean} isActive - Whether rule is active\n * @returns {Promise<Object>} - Create result with new rule data\n */\nexport const createRule = async (eventId, name, type, value, isActive) => {\n  try {\n    // In a real app, this would call your backend API\n    // return await fetchFromAPI(`/events/${eventId}/rules`, {\n    //   method: 'POST',\n    //   headers: {\n    //     'Content-Type': 'application/json',\n    //   },\n    //   body: JSON.stringify({ name, type, value, isActive }),\n    // });\n    \n    // For demo purposes, use mock implementation\n    return await mockData.mockCreateRule(eventId, name, type, value, isActive);\n  } catch (error) {\n    console.error(`Error creating rule for event ${eventId}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Update an existing rule\n * @param {number} eventId - Event ID\n * @param {Object} rule - Rule object with updated data\n * @returns {Promise<Object>} - Update result\n */\nexport const updateRule = async (eventId, rule) => {\n  try {\n    // In a real app, this would call your backend API\n    // return await fetchFromAPI(`/events/${eventId}/rules/${rule.id}`, {\n    //   method: 'PATCH',\n    //   headers: {\n    //     'Content-Type': 'application/json',\n    //   },\n    //   body: JSON.stringify(rule),\n    // });\n    \n    // For demo purposes, use mock implementation\n    return await mockData.mockUpdateRule(eventId, rule);\n  } catch (error) {\n    console.error(`Error updating rule ${rule.id} for event ${eventId}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Delete a rule\n * @param {number} eventId - Event ID\n * @param {number} ruleId - Rule ID\n * @returns {Promise<Object>} - Delete result\n */\nexport const deleteRule = async (eventId, ruleId) => {\n  try {\n    // In a real app, this would call your backend API\n    // return await fetchFromAPI(`/events/${eventId}/rules/${ruleId}`, {\n    //   method: 'DELETE',\n    // });\n    \n    // For demo purposes, use mock implementation\n    return await mockData.mockDeleteRule(eventId, ruleId);\n  } catch (error) {\n    console.error(`Error deleting rule ${ruleId} for event ${eventId}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Update event status (active/inactive)\n * @param {number} eventId - Event ID\n * @param {boolean} isActive - Whether event is active\n * @returns {Promise<Object>} - Update result\n */\nexport const updateEventStatus = async (eventId, isActive) => {\n  try {\n    // In a real app, this would call your backend API\n    // return await fetchFromAPI(`/events/${eventId}`, {\n    //   method: 'PATCH',\n    //   headers: {\n    //     'Content-Type': 'application/json',\n    //   },\n    //   body: JSON.stringify({ isActive }),\n    // });\n    \n    // For demo purposes, use mock implementation\n    return await mockData.mockUpdateEventStatus(eventId, isActive);\n  } catch (error) {\n    console.error(`Error updating event ${eventId} status:`, error);\n    throw error;\n  }\n};\n\n/**\n * Create a new event\n * @param {string} name - Event name\n * @param {string} date - Event date\n * @returns {Promise<Object>} - Create result with new event data\n */\nexport const createEvent = async (name, date) => {\n  try {\n    // In a real app, this would call your backend API\n    // return await fetchFromAPI('/events', {\n    //   method: 'POST',\n    //   headers: {\n    //     'Content-Type': 'application/json',\n    //   },\n    //   body: JSON.stringify({ name, date }),\n    // });\n    \n    // For demo purposes, use mock implementation\n    return await mockData.mockCreateEvent(name, date);\n  } catch (error) {\n    console.error('Error creating event:', error);\n    throw error;\n  }\n};\n\n/**\n * Delete an event\n * @param {number} eventId - Event ID\n * @returns {Promise<Object>} - Delete result\n */\nexport const deleteEvent = async (eventId) => {\n  try {\n    // In a real app, this would call your backend API\n    // return await fetchFromAPI(`/events/${eventId}`, {\n    //   method: 'DELETE',\n    // });\n    \n    // For demo purposes, use mock implementation\n    return await mockData.mockDeleteEvent(eventId);\n  } catch (error) {\n    console.error(`Error deleting event ${eventId}:`, error);\n    throw error;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}