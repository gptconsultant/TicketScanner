{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable;})),t.push.apply(t,o);}return t;}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r));});}return e;}import React,{createContext,useState,useEffect,useContext}from'react';import NetInfo from'@react-native-community/netinfo';import{registerNetworkListeners}from\"../utils/networkUtils\";import{jsx as _jsx}from\"react/jsx-runtime\";export var NetworkContext=createContext({isConnected:true,isInternetReachable:true,apiIsReachable:true});export var useNetwork=function useNetwork(){return useContext(NetworkContext);};export var NetworkProvider=function NetworkProvider(_ref){var children=_ref.children;var _useState=useState({isConnected:true,isInternetReachable:true}),_useState2=_slicedToArray(_useState,2),netInfo=_useState2[0],setNetInfo=_useState2[1];var _useState3=useState(true),_useState4=_slicedToArray(_useState3,2),apiIsReachable=_useState4[0],setApiIsReachable=_useState4[1];var _useState5=useState(null),_useState6=_slicedToArray(_useState5,2),lastOnlineTime=_useState6[0],setLastOnlineTime=_useState6[1];useEffect(function(){var handleConnection=function handleConnection(){setApiIsReachable(true);setLastOnlineTime(new Date());};var handleDisconnection=function handleDisconnection(){setApiIsReachable(false);};var unsubscribeNetInfo=NetInfo.addEventListener(function(state){setNetInfo({isConnected:state.isConnected,isInternetReachable:state.isInternetReachable});if(state.isConnected&&state.isInternetReachable){setLastOnlineTime(new Date());}});var unsubscribeApiMonitor=registerNetworkListeners(handleConnection,handleDisconnection);NetInfo.fetch().then(function(state){setNetInfo({isConnected:state.isConnected,isInternetReachable:state.isInternetReachable});if(state.isConnected&&state.isInternetReachable){setLastOnlineTime(new Date());}});return function(){unsubscribeNetInfo();unsubscribeApiMonitor();};},[]);return _jsx(NetworkContext.Provider,{value:_objectSpread(_objectSpread({},netInfo),{},{apiIsReachable:apiIsReachable,lastOnlineTime:lastOnlineTime,isOfflineMode:!apiIsReachable}),children:children});};","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","NetInfo","registerNetworkListeners","jsx","_jsx","NetworkContext","isConnected","isInternetReachable","apiIsReachable","useNetwork","NetworkProvider","_ref","children","_useState","_useState2","_slicedToArray","netInfo","setNetInfo","_useState3","_useState4","setApiIsReachable","_useState5","_useState6","lastOnlineTime","setLastOnlineTime","handleConnection","Date","handleDisconnection","unsubscribeNetInfo","addEventListener","state","unsubscribeApiMonitor","fetch","then","Provider","value","_objectSpread","isOfflineMode"],"sources":["/home/runner/workspace/src/contexts/NetworkContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\nimport NetInfo from '@react-native-community/netinfo';\nimport { registerNetworkListeners } from '../utils/networkUtils';\n\n// Create context\nexport const NetworkContext = createContext({\n  isConnected: true,\n  isInternetReachable: true,\n  apiIsReachable: true,\n});\n\n// Custom hook for using the network context\nexport const useNetwork = () => useContext(NetworkContext);\n\n// Provider component\nexport const NetworkProvider = ({ children }) => {\n  const [netInfo, setNetInfo] = useState({\n    isConnected: true,\n    isInternetReachable: true,\n  });\n  const [apiIsReachable, setApiIsReachable] = useState(true);\n  const [lastOnlineTime, setLastOnlineTime] = useState(null);\n\n  // Monitor network connectivity\n  useEffect(() => {\n    // Handle connection\n    const handleConnection = () => {\n      setApiIsReachable(true);\n      setLastOnlineTime(new Date());\n    };\n\n    // Handle disconnection\n    const handleDisconnection = () => {\n      setApiIsReachable(false);\n    };\n\n    // Subscribe to network state updates\n    const unsubscribeNetInfo = NetInfo.addEventListener(state => {\n      setNetInfo({\n        isConnected: state.isConnected,\n        isInternetReachable: state.isInternetReachable,\n      });\n      \n      if (state.isConnected && state.isInternetReachable) {\n        setLastOnlineTime(new Date());\n      }\n    });\n\n    // Subscribe to API reachability updates\n    const unsubscribeApiMonitor = registerNetworkListeners(\n      handleConnection,\n      handleDisconnection\n    );\n\n    // Initial network state check\n    NetInfo.fetch().then(state => {\n      setNetInfo({\n        isConnected: state.isConnected,\n        isInternetReachable: state.isInternetReachable,\n      });\n      \n      if (state.isConnected && state.isInternetReachable) {\n        setLastOnlineTime(new Date());\n      }\n    });\n\n    // Cleanup\n    return () => {\n      unsubscribeNetInfo();\n      unsubscribeApiMonitor();\n    };\n  }, []);\n\n  return (\n    <NetworkContext.Provider\n      value={{\n        ...netInfo,\n        apiIsReachable,\n        lastOnlineTime,\n        isOfflineMode: !apiIsReachable,\n      }}\n    >\n      {children}\n    </NetworkContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}