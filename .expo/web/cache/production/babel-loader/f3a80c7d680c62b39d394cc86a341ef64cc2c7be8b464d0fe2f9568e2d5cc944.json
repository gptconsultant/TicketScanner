{"ast":null,"code":"import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";var _BarCodeScanner;function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable;})),t.push.apply(t,o);}return t;}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r));});}return e;}function _callSuper(t,o,e){return o=_getPrototypeOf(o),_possibleConstructorReturn(t,_isNativeReflectConstruct()?Reflect.construct(o,e||[],_getPrototypeOf(t).constructor):o.apply(t,e));}function _isNativeReflectConstruct(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));}catch(t){}return(_isNativeReflectConstruct=function _isNativeReflectConstruct(){return!!t;})();}import{PermissionStatus,createPermissionHook,UnavailabilityError}from'expo-modules-core';import*as React from'react';import Platform from\"react-native-web/dist/exports/Platform\";import ExpoBarCodeScannerModule from\"./ExpoBarCodeScannerModule\";import ExpoBarCodeScannerView from\"./ExpoBarCodeScannerView\";import{jsx as _jsx}from\"react/jsx-runtime\";var BarCodeType=ExpoBarCodeScannerModule.BarCodeType,Type=ExpoBarCodeScannerModule.Type;var EVENT_THROTTLE_MS=500;var warnedAboutDeprecation=false;export var BarCodeScanner=function(_React$Component){function BarCodeScanner(){var _this;_classCallCheck(this,BarCodeScanner);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_callSuper(this,BarCodeScanner,[].concat(args));_this.lastEvents={};_this.lastEventsTimes={};_this.onObjectDetected=function(callback){return function(_ref){var nativeEvent=_ref.nativeEvent;var type=nativeEvent.type;if(_this.lastEvents[type]&&_this.lastEventsTimes[type]&&JSON.stringify(nativeEvent)===_this.lastEvents[type]&&Date.now()-_this.lastEventsTimes[type]<EVENT_THROTTLE_MS){return;}if(callback){callback(nativeEvent);_this.lastEventsTimes[type]=new Date();_this.lastEvents[type]=JSON.stringify(nativeEvent);}};};return _this;}_inherits(BarCodeScanner,_React$Component);return _createClass(BarCodeScanner,[{key:\"componentDidMount\",value:function componentDidMount(){if(!warnedAboutDeprecation){console.warn('BarCodeScanner has been deprecated and will be removed in a future SDK version. Please use `expo-camera` instead. See https://expo.fyi/barcode-scanner-to-expo-camera for more details on how to migrate');warnedAboutDeprecation=true;}}},{key:\"render\",value:function render(){var nativeProps=this.convertNativeProps(this.props);var onBarCodeScanned=this.props.onBarCodeScanned;return _jsx(ExpoBarCodeScannerView,_objectSpread(_objectSpread({},nativeProps),{},{onBarCodeScanned:this.onObjectDetected(onBarCodeScanned)}));}},{key:\"convertNativeProps\",value:function convertNativeProps(props){var nativeProps={};for(var _ref2 of Object.entries(props)){var _ref3=_slicedToArray(_ref2,2);var key=_ref3[0];var value=_ref3[1];if(typeof value==='string'&&BarCodeScanner.ConversionTables[key]){nativeProps[key]=BarCodeScanner.ConversionTables[key][value];}else{nativeProps[key]=value;}}return nativeProps;}}],[{key:\"getPermissionsAsync\",value:function(){var _getPermissionsAsync=_asyncToGenerator(function*(){return ExpoBarCodeScannerModule.getPermissionsAsync();});function getPermissionsAsync(){return _getPermissionsAsync.apply(this,arguments);}return getPermissionsAsync;}()},{key:\"requestPermissionsAsync\",value:function(){var _requestPermissionsAsync=_asyncToGenerator(function*(){return ExpoBarCodeScannerModule.requestPermissionsAsync();});function requestPermissionsAsync(){return _requestPermissionsAsync.apply(this,arguments);}return requestPermissionsAsync;}()},{key:\"scanFromURLAsync\",value:function(){var _scanFromURLAsync=_asyncToGenerator(function*(url){var barCodeTypes=arguments.length>1&&arguments[1]!==undefined?arguments[1]:Object.values(BarCodeType);if(!ExpoBarCodeScannerModule.scanFromURLAsync){throw new UnavailabilityError('expo-barcode-scanner','scanFromURLAsync');}if(Array.isArray(barCodeTypes)&&!barCodeTypes.length){throw new Error('No barCodeTypes specified; provide at least one barCodeType for scanner');}if(Platform.OS==='ios'){if(Array.isArray(barCodeTypes)&&!barCodeTypes.includes(BarCodeType.qr)){throw new Error('Only QR type is supported by scanFromURLAsync() on iOS');}return yield ExpoBarCodeScannerModule.scanFromURLAsync(url,[BarCodeType.qr]);}return yield ExpoBarCodeScannerModule.scanFromURLAsync(url,barCodeTypes);});function scanFromURLAsync(_x){return _scanFromURLAsync.apply(this,arguments);}return scanFromURLAsync;}()}]);}(React.Component);_BarCodeScanner=BarCodeScanner;BarCodeScanner.Constants={BarCodeType:BarCodeType,Type:Type};BarCodeScanner.ConversionTables={type:Type};BarCodeScanner.defaultProps={type:Type.back,barCodeTypes:Object.values(BarCodeType)};BarCodeScanner.usePermissions=createPermissionHook({getMethod:_BarCodeScanner.getPermissionsAsync,requestMethod:_BarCodeScanner.requestPermissionsAsync});export{PermissionStatus};var Constants=BarCodeScanner.Constants,getPermissionsAsync=BarCodeScanner.getPermissionsAsync,requestPermissionsAsync=BarCodeScanner.requestPermissionsAsync,scanFromURLAsync=BarCodeScanner.scanFromURLAsync;export{Constants,getPermissionsAsync,requestPermissionsAsync,scanFromURLAsync};","map":{"version":3,"names":["PermissionStatus","createPermissionHook","UnavailabilityError","React","Platform","ExpoBarCodeScannerModule","ExpoBarCodeScannerView","jsx","_jsx","BarCodeType","Type","EVENT_THROTTLE_MS","warnedAboutDeprecation","BarCodeScanner","_React$Component","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_callSuper","concat","lastEvents","lastEventsTimes","onObjectDetected","callback","_ref","nativeEvent","type","JSON","stringify","Date","now","_inherits","_createClass","key","value","componentDidMount","console","warn","render","nativeProps","convertNativeProps","props","onBarCodeScanned","_objectSpread","_ref2","Object","entries","_ref3","_slicedToArray","ConversionTables","_getPermissionsAsync","_asyncToGenerator","getPermissionsAsync","apply","_requestPermissionsAsync","requestPermissionsAsync","_scanFromURLAsync","url","barCodeTypes","undefined","values","scanFromURLAsync","isArray","Error","OS","includes","qr","_x","Component","Constants","defaultProps","back","usePermissions","getMethod","requestMethod"],"sources":["/home/runner/workspace/node_modules/expo-barcode-scanner/src/BarCodeScanner.tsx"],"sourcesContent":["import {\n  PermissionResponse,\n  PermissionStatus,\n  PermissionHookOptions,\n  createPermissionHook,\n  UnavailabilityError,\n} from 'expo-modules-core';\nimport * as React from 'react';\nimport { Platform, ViewProps } from 'react-native';\n\nimport ExpoBarCodeScannerModule from './ExpoBarCodeScannerModule';\nimport ExpoBarCodeScannerView from './ExpoBarCodeScannerView';\n\nconst { BarCodeType, Type } = ExpoBarCodeScannerModule;\n\nconst EVENT_THROTTLE_MS = 500;\n\nlet warnedAboutDeprecation = false;\n\n// @needsAudit\n/**\n * Those coordinates are represented in the coordinate space of the barcode source (e.g. when you\n * are using the barcode scanner view, these values are adjusted to the dimensions of the view).\n */\nexport type BarCodePoint = {\n  /**\n   * The `x` coordinate value.\n   */\n  x: number;\n  /**\n   * The `y` coordinate value.\n   */\n  y: number;\n};\n\n// @needsAudit\nexport type BarCodeSize = {\n  /**\n   * The height value.\n   */\n  height: number;\n  /**\n   * The width value.\n   */\n  width: number;\n};\n\n// @needsAudit\nexport type BarCodeBounds = {\n  /**\n   * The origin point of the bounding box.\n   */\n  origin: BarCodePoint;\n  /**\n   * The size of the bounding box.\n   */\n  size: BarCodeSize;\n};\n\n// @needsAudit\nexport type BarCodeScannerResult = {\n  /**\n   * The barcode type.\n   */\n  type: string;\n  /**\n   * The parsed information encoded in the bar code.\n   */\n  data: string;\n  /**\n   * The raw information encoded in the bar code.\n   * May be different from `data` depending on the barcode type.\n   * @platform android\n   * @hidden\n   */\n  raw?: string;\n  /**\n   * The [BarCodeBounds](#barcodebounds) object.\n   * `bounds` in some case will be representing an empty rectangle.\n   * Moreover, `bounds` doesn't have to bound the whole barcode.\n   * For some types, they will represent the area used by the scanner.\n   */\n  bounds: BarCodeBounds;\n  /**\n   * Corner points of the bounding box.\n   * `cornerPoints` is not always available and may be empty. On iOS, for `code39` and `pdf417`\n   * you don't get this value.\n   */\n  cornerPoints: BarCodePoint[];\n};\n\n// @docsMissing\nexport type BarCodeEvent = BarCodeScannerResult & {\n  target?: number;\n};\n\n// @docsMissing\nexport type BarCodeEventCallbackArguments = {\n  nativeEvent: BarCodeEvent;\n};\n\n// @docsMissing\nexport type BarCodeScannedCallback = (params: BarCodeEvent) => void;\n\n// @needsAudit\nexport type BarCodeScannerProps = ViewProps & {\n  /**\n   * Camera facing. Use one of `BarCodeScanner.Constants.Type`. Use either `Type.front` or `Type.back`.\n   * Same as `Camera.Constants.Type`.\n   * @default Type.back\n   */\n  type?: 'front' | 'back' | number;\n  /**\n   * An array of bar code types. Usage: `BarCodeScanner.Constants.BarCodeType.<codeType>` where\n   * `codeType` is one of these [listed above](#supported-formats). Defaults to all supported bar\n   * code types. It is recommended to provide only the bar code formats you expect to scan to\n   * minimize battery usage.\n   *\n   * For example: `barCodeTypes={[BarCodeScanner.Constants.BarCodeType.qr]}`.\n   */\n  barCodeTypes?: string[];\n  /**\n   * A callback that is invoked when a bar code has been successfully scanned. The callback is\n   * provided with an [BarCodeScannerResult](#barcodescannerresult).\n   * > __Note:__ Passing `undefined` to the `onBarCodeScanned` prop will result in no scanning. This\n   * > can be used to effectively \"pause\" the scanner so that it doesn't continually scan even after\n   * > data has been retrieved.\n   */\n  onBarCodeScanned?: BarCodeScannedCallback;\n};\n\n/**\n * @deprecated\n * BarCodeScanner has been deprecated and will be removed in a future SDK version. Use `expo-camera` instead.\n * See [How to migrate from `expo-barcode-scanner` to `expo-camera`](https://expo.fyi/barcode-scanner-to-expo-camera)\n * for more details.\n */\nexport class BarCodeScanner extends React.Component<BarCodeScannerProps> {\n  lastEvents: { [key: string]: any } = {};\n  lastEventsTimes: { [key: string]: any } = {};\n\n  static Constants = {\n    BarCodeType,\n    Type,\n  };\n\n  static ConversionTables = {\n    type: Type,\n  };\n\n  static defaultProps = {\n    type: Type.back,\n    barCodeTypes: Object.values(BarCodeType),\n  };\n\n  componentDidMount(): void {\n    if (!warnedAboutDeprecation) {\n      console.warn(\n        'BarCodeScanner has been deprecated and will be removed in a future SDK version. Please use `expo-camera` instead. See https://expo.fyi/barcode-scanner-to-expo-camera for more details on how to migrate'\n      );\n      warnedAboutDeprecation = true;\n    }\n  }\n\n  // @needsAudit\n  /**\n   * Checks user's permissions for accessing the camera.\n   * @return Return a promise that fulfills to an object of type [`PermissionResponse`](#permissionresponse).\n   */\n  static async getPermissionsAsync(): Promise<PermissionResponse> {\n    return ExpoBarCodeScannerModule.getPermissionsAsync();\n  }\n\n  // @needsAudit\n  /**\n   * Asks the user to grant permissions for accessing the camera.\n   *\n   * On iOS this will require apps to specify the `NSCameraUsageDescription` entry in the `Info.plist`.\n   * @return Return a promise that fulfills to an object of type [`PermissionResponse`](#permissionresponse).\n   */\n  static async requestPermissionsAsync(): Promise<PermissionResponse> {\n    return ExpoBarCodeScannerModule.requestPermissionsAsync();\n  }\n\n  // @needsAudit\n  /**\n   * Check or request permissions for the barcode scanner.\n   * This uses both `requestPermissionAsync` and `getPermissionsAsync` to interact with the permissions.\n   *\n   * @example\n   * ```ts\n   * const [permissionResponse, requestPermission] = BarCodeScanner.usePermissions();\n   * ```\n   */\n  static usePermissions = createPermissionHook({\n    getMethod: BarCodeScanner.getPermissionsAsync,\n    requestMethod: BarCodeScanner.requestPermissionsAsync,\n  });\n\n  // @needsAudit\n  /**\n   * Scan bar codes from the image given by the URL.\n   * @param url URL to get the image from.\n   * @param barCodeTypes An array of bar code types. Defaults to all supported bar code types on\n   * the platform.\n   * > __Note:__ Only QR codes are supported on iOS.\n   * @return A possibly empty array of objects of the `BarCodeScannerResult` shape, where the type\n   * refers to the bar code type that was scanned and the data is the information encoded in the bar\n   * code.\n   */\n  static async scanFromURLAsync(\n    url: string,\n    barCodeTypes: string[] = Object.values(BarCodeType)\n  ): Promise<BarCodeScannerResult[]> {\n    if (!ExpoBarCodeScannerModule.scanFromURLAsync) {\n      throw new UnavailabilityError('expo-barcode-scanner', 'scanFromURLAsync');\n    }\n    if (Array.isArray(barCodeTypes) && !barCodeTypes.length) {\n      throw new Error('No barCodeTypes specified; provide at least one barCodeType for scanner');\n    }\n\n    if (Platform.OS === 'ios') {\n      if (Array.isArray(barCodeTypes) && !barCodeTypes.includes(BarCodeType.qr)) {\n        // Only QR type is supported on iOS, fail if one tries to use other types\n        throw new Error('Only QR type is supported by scanFromURLAsync() on iOS');\n      }\n      // on iOS use only supported QR type\n      return await ExpoBarCodeScannerModule.scanFromURLAsync(url, [BarCodeType.qr]);\n    }\n\n    // On other platforms, if barCodeTypes is not provided, use all available types\n    return await ExpoBarCodeScannerModule.scanFromURLAsync(url, barCodeTypes);\n  }\n\n  render() {\n    const nativeProps = this.convertNativeProps(this.props);\n    const { onBarCodeScanned } = this.props;\n    return (\n      <ExpoBarCodeScannerView\n        {...nativeProps}\n        onBarCodeScanned={this.onObjectDetected(onBarCodeScanned)}\n      />\n    );\n  }\n\n  /**\n   * @hidden\n   */\n  onObjectDetected =\n    (callback?: BarCodeScannedCallback) =>\n    ({ nativeEvent }: BarCodeEventCallbackArguments) => {\n      const { type } = nativeEvent;\n      if (\n        this.lastEvents[type] &&\n        this.lastEventsTimes[type] &&\n        JSON.stringify(nativeEvent) === this.lastEvents[type] &&\n        Date.now() - this.lastEventsTimes[type] < EVENT_THROTTLE_MS\n      ) {\n        return;\n      }\n\n      if (callback) {\n        callback(nativeEvent);\n        this.lastEventsTimes[type] = new Date();\n        this.lastEvents[type] = JSON.stringify(nativeEvent);\n      }\n    };\n\n  /**\n   * @hidden\n   */\n  convertNativeProps(props: BarCodeScannerProps) {\n    const nativeProps: BarCodeScannerProps = {};\n\n    for (const [key, value] of Object.entries(props)) {\n      if (typeof value === 'string' && BarCodeScanner.ConversionTables[key]) {\n        nativeProps[key] = BarCodeScanner.ConversionTables[key][value];\n      } else {\n        nativeProps[key] = value;\n      }\n    }\n\n    return nativeProps;\n  }\n}\n\nexport { PermissionResponse, PermissionStatus, PermissionHookOptions };\nexport const { Constants, getPermissionsAsync, requestPermissionsAsync, scanFromURLAsync } =\n  BarCodeScanner;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}