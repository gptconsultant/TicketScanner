{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable;})),t.push.apply(t,o);}return t;}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r));});}return e;}export var parseQRData=function parseQRData(qrData){try{if(typeof qrData==='string'){return JSON.parse(qrData);}if(typeof qrData==='object'&&qrData!==null){return qrData;}return null;}catch(error){console.error('Error parsing QR data:',error);return null;}};export var validateQRFormat=function validateQRFormat(qrData){if(!qrData){return{valid:false,reason:'No ticket data found'};}try{var parsedData=typeof qrData==='string'?JSON.parse(qrData):qrData;if(!parsedData.id){return{valid:false,reason:'Missing ticket ID',ticket:parsedData};}if(!parsedData.eventId){return{valid:false,reason:'Missing event ID',ticket:parsedData};}return{valid:true,ticket:parsedData};}catch(error){return{valid:false,reason:'Invalid ticket format (not valid JSON)'};}};export var generateQRData=function generateQRData(ticket){try{var standardizedTicket=_objectSpread({id:ticket.id,eventId:ticket.eventId,type:ticket.type||'STANDARD',holderName:ticket.holderName||'',seat:ticket.seat||''},ticket);return JSON.stringify(standardizedTicket);}catch(error){console.error('Error generating QR data:',error);return'';}};","map":{"version":3,"names":["parseQRData","qrData","JSON","parse","error","console","validateQRFormat","valid","reason","parsedData","id","ticket","eventId","generateQRData","standardizedTicket","_objectSpread","type","holderName","seat","stringify"],"sources":["/home/runner/workspace/src/utils/qrUtils.js"],"sourcesContent":["/**\n * Parse a QR code string into a ticket object\n * @param {string} qrData - The QR code data string\n * @returns {Object|null} - Parsed ticket object or null if invalid\n */\nexport const parseQRData = (qrData) => {\n  try {\n    // Try to parse as JSON\n    if (typeof qrData === 'string') {\n      return JSON.parse(qrData);\n    }\n    // If already an object, return as is\n    if (typeof qrData === 'object' && qrData !== null) {\n      return qrData;\n    }\n    return null;\n  } catch (error) {\n    console.error('Error parsing QR data:', error);\n    return null;\n  }\n};\n\n/**\n * Validate basic QR format before sending to server\n * @param {string} qrData - The QR code data string\n * @returns {Object} - Validation result with validity and reason\n */\nexport const validateQRFormat = (qrData) => {\n  if (!qrData) {\n    return {\n      valid: false,\n      reason: 'No ticket data found'\n    };\n  }\n\n  try {\n    const parsedData = typeof qrData === 'string' ? JSON.parse(qrData) : qrData;\n    \n    // Check for minimum required fields\n    if (!parsedData.id) {\n      return {\n        valid: false,\n        reason: 'Missing ticket ID',\n        ticket: parsedData\n      };\n    }\n    \n    if (!parsedData.eventId) {\n      return {\n        valid: false,\n        reason: 'Missing event ID',\n        ticket: parsedData\n      };\n    }\n    \n    // Valid format\n    return {\n      valid: true,\n      ticket: parsedData\n    };\n  } catch (error) {\n    return {\n      valid: false,\n      reason: 'Invalid ticket format (not valid JSON)'\n    };\n  }\n};\n\n/**\n * Generate a standard format for QR code data\n * @param {Object} ticket - Ticket data object\n * @returns {string} - JSON string formatted for QR code\n */\nexport const generateQRData = (ticket) => {\n  try {\n    // Ensure minimum required fields\n    const standardizedTicket = {\n      id: ticket.id,\n      eventId: ticket.eventId,\n      type: ticket.type || 'STANDARD',\n      holderName: ticket.holderName || '',\n      seat: ticket.seat || '',\n      ...ticket\n    };\n    \n    return JSON.stringify(standardizedTicket);\n  } catch (error) {\n    console.error('Error generating QR data:', error);\n    return '';\n  }\n};"],"mappings":"+qBAKA,MAAO,IAAM,CAAAA,WAAW,CAAG,QAAd,CAAAA,WAAWA,CAAIC,MAAM,CAAK,CACrC,GAAI,CAEF,GAAI,MAAO,CAAAA,MAAM,GAAK,QAAQ,CAAE,CAC9B,MAAO,CAAAC,IAAI,CAACC,KAAK,CAACF,MAAM,CAAC,CAC3B,CAEA,GAAI,MAAO,CAAAA,MAAM,GAAK,QAAQ,EAAIA,MAAM,GAAK,IAAI,CAAE,CACjD,MAAO,CAAAA,MAAM,CACf,CACA,MAAO,KAAI,CACb,CAAE,MAAOG,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,CAAEA,KAAK,CAAC,CAC9C,MAAO,KAAI,CACb,CACF,CAAC,CAOD,MAAO,IAAM,CAAAE,gBAAgB,CAAG,QAAnB,CAAAA,gBAAgBA,CAAIL,MAAM,CAAK,CAC1C,GAAI,CAACA,MAAM,CAAE,CACX,MAAO,CACLM,KAAK,CAAE,KAAK,CACZC,MAAM,CAAE,sBACV,CAAC,CACH,CAEA,GAAI,CACF,GAAM,CAAAC,UAAU,CAAG,MAAO,CAAAR,MAAM,GAAK,QAAQ,CAAGC,IAAI,CAACC,KAAK,CAACF,MAAM,CAAC,CAAGA,MAAM,CAG3E,GAAI,CAACQ,UAAU,CAACC,EAAE,CAAE,CAClB,MAAO,CACLH,KAAK,CAAE,KAAK,CACZC,MAAM,CAAE,mBAAmB,CAC3BG,MAAM,CAAEF,UACV,CAAC,CACH,CAEA,GAAI,CAACA,UAAU,CAACG,OAAO,CAAE,CACvB,MAAO,CACLL,KAAK,CAAE,KAAK,CACZC,MAAM,CAAE,kBAAkB,CAC1BG,MAAM,CAAEF,UACV,CAAC,CACH,CAGA,MAAO,CACLF,KAAK,CAAE,IAAI,CACXI,MAAM,CAAEF,UACV,CAAC,CACH,CAAE,MAAOL,KAAK,CAAE,CACd,MAAO,CACLG,KAAK,CAAE,KAAK,CACZC,MAAM,CAAE,wCACV,CAAC,CACH,CACF,CAAC,CAOD,MAAO,IAAM,CAAAK,cAAc,CAAG,QAAjB,CAAAA,cAAcA,CAAIF,MAAM,CAAK,CACxC,GAAI,CAEF,GAAM,CAAAG,kBAAkB,CAAAC,aAAA,EACtBL,EAAE,CAAEC,MAAM,CAACD,EAAE,CACbE,OAAO,CAAED,MAAM,CAACC,OAAO,CACvBI,IAAI,CAAEL,MAAM,CAACK,IAAI,EAAI,UAAU,CAC/BC,UAAU,CAAEN,MAAM,CAACM,UAAU,EAAI,EAAE,CACnCC,IAAI,CAAEP,MAAM,CAACO,IAAI,EAAI,EAAE,EACpBP,MAAM,CACV,CAED,MAAO,CAAAT,IAAI,CAACiB,SAAS,CAACL,kBAAkB,CAAC,CAC3C,CAAE,MAAOV,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,CAAEA,KAAK,CAAC,CACjD,MAAO,EAAE,CACX,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}