{"ast":null,"code":"import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import NetInfo from'@react-native-community/netinfo';import{checkApiConnection}from\"../services/api\";export var isAPIReachable=function(){var _ref=_asyncToGenerator(function*(){try{var netInfo=yield NetInfo.fetch();if(!netInfo.isConnected){return false;}return yield checkApiConnection();}catch(error){console.error('Error checking API reachability:',error);return false;}});return function isAPIReachable(){return _ref.apply(this,arguments);};}();export var registerNetworkListeners=function registerNetworkListeners(onConnected,onDisconnected){var unsubscribe=NetInfo.addEventListener(function(state){if(state.isConnected){checkApiConnection().then(function(isReachable){if(isReachable){onConnected();}});}else{onDisconnected();}});return unsubscribe;};export var retryWithBackoff=function(){var _ref2=_asyncToGenerator(function*(fn){var maxRetries=arguments.length>1&&arguments[1]!==undefined?arguments[1]:3;var baseDelay=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1000;var lastError;var _loop=function*_loop(){try{return{v:yield fn()};}catch(error){lastError=error;if(attempt===maxRetries){return 0;}var delay=baseDelay*Math.pow(2,attempt);var jitter=Math.random()*100;yield new Promise(function(resolve){return setTimeout(resolve,delay+jitter);});}},_ret;for(var attempt=0;attempt<=maxRetries;attempt++){_ret=yield*_loop();if(_ret===0)break;if(_ret)return _ret.v;}throw lastError;});return function retryWithBackoff(_x){return _ref2.apply(this,arguments);};}();","map":{"version":3,"names":["NetInfo","checkApiConnection","isAPIReachable","_ref","_asyncToGenerator","netInfo","fetch","isConnected","error","console","apply","arguments","registerNetworkListeners","onConnected","onDisconnected","unsubscribe","addEventListener","state","then","isReachable","retryWithBackoff","_ref2","fn","maxRetries","length","undefined","baseDelay","lastError","_loop","v","attempt","delay","Math","pow","jitter","random","Promise","resolve","setTimeout","_ret","_x"],"sources":["/home/runner/workspace/src/utils/networkUtils.js"],"sourcesContent":["import NetInfo from '@react-native-community/netinfo';\nimport { checkApiConnection } from '../services/api';\n\n/**\n * Check if the device is connected to the internet and the API is reachable\n * @returns {Promise<boolean>} - Whether the API is reachable\n */\nexport const isAPIReachable = async () => {\n  try {\n    // First check if the device has internet connectivity\n    const netInfo = await NetInfo.fetch();\n    \n    if (!netInfo.isConnected) {\n      return false;\n    }\n    \n    // Then check if the API is reachable\n    return await checkApiConnection();\n  } catch (error) {\n    console.error('Error checking API reachability:', error);\n    return false;\n  }\n};\n\n/**\n * Register listeners for network state changes\n * @param {Function} onConnected - Callback when connected\n * @param {Function} onDisconnected - Callback when disconnected\n * @returns {Function} - Cleanup function to unsubscribe\n */\nexport const registerNetworkListeners = (onConnected, onDisconnected) => {\n  // Subscribe to network state updates\n  const unsubscribe = NetInfo.addEventListener(state => {\n    if (state.isConnected) {\n      // Check if API is reachable when connection is established\n      checkApiConnection().then(isReachable => {\n        if (isReachable) {\n          onConnected();\n        }\n      });\n    } else {\n      onDisconnected();\n    }\n  });\n  \n  return unsubscribe;\n};\n\n/**\n * Retry a function with exponential backoff\n * @param {Function} fn - Function to retry\n * @param {number} maxRetries - Maximum number of retries\n * @param {number} baseDelay - Base delay in ms\n * @returns {Promise<any>} - Result of the function\n */\nexport const retryWithBackoff = async (fn, maxRetries = 3, baseDelay = 1000) => {\n  let lastError;\n  \n  for (let attempt = 0; attempt <= maxRetries; attempt++) {\n    try {\n      return await fn();\n    } catch (error) {\n      lastError = error;\n      \n      if (attempt === maxRetries) {\n        break;\n      }\n      \n      // Calculate exponential backoff delay\n      const delay = baseDelay * Math.pow(2, attempt);\n      \n      // Add some randomness to prevent all clients retrying simultaneously\n      const jitter = Math.random() * 100;\n      \n      // Wait before next attempt\n      await new Promise(resolve => setTimeout(resolve, delay + jitter));\n    }\n  }\n  \n  throw lastError;\n};"],"mappings":"uEAAA,MAAO,CAAAA,OAAO,KAAM,iCAAiC,CACrD,OAASC,kBAAkB,uBAM3B,MAAO,IAAM,CAAAC,cAAc,gBAAAC,IAAA,CAAAC,iBAAA,CAAG,WAAY,CACxC,GAAI,CAEF,GAAM,CAAAC,OAAO,MAAS,CAAAL,OAAO,CAACM,KAAK,CAAC,CAAC,CAErC,GAAI,CAACD,OAAO,CAACE,WAAW,CAAE,CACxB,MAAO,MAAK,CACd,CAGA,YAAa,CAAAN,kBAAkB,CAAC,CAAC,CACnC,CAAE,MAAOO,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,CAAEA,KAAK,CAAC,CACxD,MAAO,MAAK,CACd,CACF,CAAC,iBAfY,CAAAN,cAAcA,CAAA,SAAAC,IAAA,CAAAO,KAAA,MAAAC,SAAA,OAe1B,CAQD,MAAO,IAAM,CAAAC,wBAAwB,CAAG,QAA3B,CAAAA,wBAAwBA,CAAIC,WAAW,CAAEC,cAAc,CAAK,CAEvE,GAAM,CAAAC,WAAW,CAAGf,OAAO,CAACgB,gBAAgB,CAAC,SAAAC,KAAK,CAAI,CACpD,GAAIA,KAAK,CAACV,WAAW,CAAE,CAErBN,kBAAkB,CAAC,CAAC,CAACiB,IAAI,CAAC,SAAAC,WAAW,CAAI,CACvC,GAAIA,WAAW,CAAE,CACfN,WAAW,CAAC,CAAC,CACf,CACF,CAAC,CAAC,CACJ,CAAC,IAAM,CACLC,cAAc,CAAC,CAAC,CAClB,CACF,CAAC,CAAC,CAEF,MAAO,CAAAC,WAAW,CACpB,CAAC,CASD,MAAO,IAAM,CAAAK,gBAAgB,gBAAAC,KAAA,CAAAjB,iBAAA,CAAG,UAAOkB,EAAE,CAAuC,IAArC,CAAAC,UAAU,CAAAZ,SAAA,CAAAa,MAAA,IAAAb,SAAA,MAAAc,SAAA,CAAAd,SAAA,IAAG,CAAC,IAAE,CAAAe,SAAS,CAAAf,SAAA,CAAAa,MAAA,IAAAb,SAAA,MAAAc,SAAA,CAAAd,SAAA,IAAG,IAAI,CACzE,GAAI,CAAAgB,SAAS,CAAC,IAAAC,KAAA,UAAAA,MAAA,CAE0C,CACtD,GAAI,QAAAC,CAAA,MACW,CAAAP,EAAE,CAAC,CAAC,EACnB,CAAE,MAAOd,KAAK,CAAE,CACdmB,SAAS,CAAGnB,KAAK,CAEjB,GAAIsB,OAAO,GAAKP,UAAU,CAAE,UAE5B,CAGA,GAAM,CAAAQ,KAAK,CAAGL,SAAS,CAAGM,IAAI,CAACC,GAAG,CAAC,CAAC,CAAEH,OAAO,CAAC,CAG9C,GAAM,CAAAI,MAAM,CAAGF,IAAI,CAACG,MAAM,CAAC,CAAC,CAAG,GAAG,CAGlC,KAAM,IAAI,CAAAC,OAAO,CAAC,SAAAC,OAAO,QAAI,CAAAC,UAAU,CAACD,OAAO,CAAEN,KAAK,CAAGG,MAAM,CAAC,GAAC,CACnE,CACF,CAAC,CAAAK,IAAA,CAnBD,IAAK,GAAI,CAAAT,OAAO,CAAG,CAAC,CAAEA,OAAO,EAAIP,UAAU,CAAEO,OAAO,EAAE,EAAAS,IAAA,OAAAX,KAAA,MAAAW,IAAA,KAOhD,MAAM,GAAAA,IAAA,QAAAA,IAAA,CAAAV,CAAA,EAcZ,KAAM,CAAAF,SAAS,CACjB,CAAC,iBAzBY,CAAAP,gBAAgBA,CAAAoB,EAAA,SAAAnB,KAAA,CAAAX,KAAA,MAAAC,SAAA,OAyB5B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}